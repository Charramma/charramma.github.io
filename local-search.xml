<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>MySQL数据库慢查询激增的定位与解决</title>
    <link href="/2025/03/16/MySQL%E6%95%B0%E6%8D%AE%E5%BA%93%E6%85%A2%E6%9F%A5%E8%AF%A2%E6%BF%80%E5%A2%9E%E7%9A%84%E5%AE%9A%E4%BD%8D%E4%B8%8E%E8%A7%A3%E5%86%B3/"/>
    <url>/2025/03/16/MySQL%E6%95%B0%E6%8D%AE%E5%BA%93%E6%85%A2%E6%9F%A5%E8%AF%A2%E6%BF%80%E5%A2%9E%E7%9A%84%E5%AE%9A%E4%BD%8D%E4%B8%8E%E8%A7%A3%E5%86%B3/</url>
    
    <content type="html"><![CDATA[<h1 id="MySQL数据慢查询激增的定位与解决"><a href="#MySQL数据慢查询激增的定位与解决" class="headerlink" title="MySQL数据慢查询激增的定位与解决"></a>MySQL数据慢查询激增的定位与解决</h1><h3 id="开启慢查询日志"><a href="#开启慢查询日志" class="headerlink" title="开启慢查询日志"></a>开启慢查询日志</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 检查是否开启慢查询日志</span><br><span class="hljs-keyword">SHOW</span> VARIABLES <span class="hljs-keyword">LIKE</span> <span class="hljs-string">&#x27;slow_query_log&#x27;</span>;<br><br><span class="hljs-comment">-- 查看慢查询阈值（执行时间超过多少秒的查询会被记录到慢查询日志中）</span><br><span class="hljs-keyword">SHOW</span> VARIABLES <span class="hljs-keyword">LIKE</span> <span class="hljs-string">&#x27;long_query_time&#x27;</span>;<br><br><span class="hljs-comment">-- 慢查询日志路径</span><br><span class="hljs-keyword">SHOW</span> VARIABLES <span class="hljs-keyword">LIKE</span> <span class="hljs-string">&#x27;show_query_log_file&#x27;</span>;<br><br><span class="hljs-comment">-- 开启慢查询日志</span><br><span class="hljs-keyword">SET</span> <span class="hljs-keyword">GLOBAL</span> slow_query_log <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;ON&#x27;</span>;<br><br><span class="hljs-comment">-- 设置慢查询阈值</span><br><span class="hljs-keyword">SET</span> <span class="hljs-keyword">GLOBAL</span> long_query_time <span class="hljs-operator">=</span> <span class="hljs-number">2</span>;<br></code></pre></td></tr></table></figure><p>上面开启慢查询日志并不是长期有效，当MySQL进程重启后，该配置将失效。</p><p>修改my.cnf使慢查询日志长期开启</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-section">[mysqld]</span><br><span class="hljs-attr">slow_query_log</span> = <span class="hljs-number">1</span><br><span class="hljs-attr">slow_query_log_file</span> = /var/log/mysql/slow.log<br><span class="hljs-attr">long_query_time</span> = <span class="hljs-number">2</span><br><span class="hljs-comment"># 记录未走索引的查询</span><br><span class="hljs-attr">log_queries_not_using_indexes</span> = <span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><h3 id="监控慢查询"><a href="#监控慢查询" class="headerlink" title="监控慢查询"></a>监控慢查询</h3><p>可以通过Prometheus+Grafana+mysqld_exporter来对MySQL进行监控，捕获数据库QPS突增、CPU使用率超阈值（&gt;80%）、慢查询数量激增等异常情况。</p><p>实时监控慢查询数量的语句：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SHOW</span> <span class="hljs-keyword">GLOBAL</span> STATUS <span class="hljs-keyword">LIKE</span> <span class="hljs-string">&#x27;Slow_queries&#x27;</span>;<br></code></pre></td></tr></table></figure><h3 id="紧急措施"><a href="#紧急措施" class="headerlink" title="紧急措施"></a>紧急措施</h3><p>为防止雪崩效应，应立即限制高危操作的并发量。</p><p>如动态限制最大连接数</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 将最大连接数降低至200</span><br><span class="hljs-keyword">SET</span> <span class="hljs-keyword">GLOBAL</span> max_connections <span class="hljs-operator">=</span> <span class="hljs-number">200</span>;<br></code></pre></td></tr></table></figure><p>可使用第三方工具如pt-kill终止耗时超过10秒的查询。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">pt-kill --busy-time 10 --kill --victims all --print h=127.0.0.1<br></code></pre></td></tr></table></figure><h3 id="分析慢查询日志"><a href="#分析慢查询日志" class="headerlink" title="分析慢查询日志"></a>分析慢查询日志</h3><p>通过分析慢日志定位问题所在</p><p>使用MySQL内置工具mysqldumnpslow提取关键信息</p><figure class="highlight excel"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs excel"># -s <span class="hljs-built_in">t</span> 按查询时间排序<br># -<span class="hljs-built_in">t</span> <span class="hljs-number">10</span> 输出<span class="hljs-number">10</span>条<br>mysqldumpslow -s <span class="hljs-built_in">t</span> -<span class="hljs-built_in">t</span> <span class="hljs-number">10</span> /<span class="hljs-built_in">var</span>/<span class="hljs-built_in">log</span>/mysql/slow.log<br></code></pre></td></tr></table></figure><p>输出示例：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">Count</span>: <span class="hljs-number">200</span>  Time=<span class="hljs-number">5</span>.<span class="hljs-number">12</span>s (<span class="hljs-number">1024</span>s)  Lock=<span class="hljs-number">0</span>.<span class="hljs-number">00</span>s (<span class="hljs-number">0</span>s)  Rows=<span class="hljs-number">100</span>.<span class="hljs-number">0</span> (<span class="hljs-number">20000</span>), user@host<br>  <span class="hljs-attribute">SELECT</span> * FROM orders WHERE status=&#x27;pending&#x27; AND create_time &gt; &#x27;<span class="hljs-number">2023</span>-<span class="hljs-number">01</span>-<span class="hljs-number">01</span>&#x27;;<br></code></pre></td></tr></table></figure><p>使用Percona Toolkit分析慢日志，生成详细报告</p><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stata">pt-<span class="hljs-keyword">query</span>-digest /<span class="hljs-keyword">var</span>/<span class="hljs-keyword">log</span>/mysql/slow.<span class="hljs-keyword">log</span> &gt; slow_report.txt<br></code></pre></td></tr></table></figure><p>输出示例：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-comment"># Percona Toolkit&#x27;s pt-query-digest version 3.0.10</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment"># Configuration file /etc/percona-toolkit/percona-toolkit.conf saved on 2024-05-15 14:37:00 UTC</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment"># Query 1: 0.00 QPS, 0.00x concurrency, ID 0x6E4F7D7D7F7D7D7D at byte 100</span><br><span class="hljs-comment"># This item is included in the report because it matches --limit.</span><br><span class="hljs-comment"># Scores: V/M = 0.00</span><br><span class="hljs-comment"># Time range: 2024-05-15 14:30:00 UTC to 2024-05-15 14:35:00 UTC</span><br><span class="hljs-comment"># Attribute    pct   total     min     max     avg     95%  stddev  median</span><br><span class="hljs-comment"># ============ === ======= ======= ======= ======= ======= ======= =======</span><br><span class="hljs-comment"># Count       100       1       1       1       1       1       0       1</span><br><span class="hljs-comment"># Exec time   100    0.01    0.01    0.01    0.01    0.01    0.00    0.01</span><br><span class="hljs-comment"># Lock time    0%    0.00    0.00    0.00    0.00    0.00    0.00    0.00</span><br><span class="hljs-comment"># Rows sent    0%       0       0       0       0       0       0       0</span><br><span class="hljs-comment"># Rows examined 100       1       1       1       1       1       0       1</span><br><span class="hljs-comment"># Bytes sent   0%       0       0       0       0       0       0       0</span><br><span class="hljs-comment"># Tmp tables   0%       0       0       0       0       0       0       0</span><br><span class="hljs-comment"># Tmp disk tables 0%       0       0       0       0       0       0       0</span><br><span class="hljs-comment"># Full scan    0%       0       0       0       0       0       0       0</span><br><span class="hljs-comment"># Full join    0%       0       0       0       0       0       0       0</span><br><span class="hljs-comment"># Tmp table on disk 0%       0       0       0       0       0       0       0</span><br><span class="hljs-comment"># Filesort     0%       0       0       0       0       0       0       0</span><br><span class="hljs-comment"># Filesort on disk 0%       0       0       0       0       0       0       0</span><br><span class="hljs-comment"># Merge passes   0%       0       0       0       0       0       0       0</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment"># Query_time distribution</span><br><span class="hljs-comment">#   1us</span><br><span class="hljs-comment">#  10us</span><br><span class="hljs-comment"># 100us</span><br><span class="hljs-comment">#   1ms  ################################################################</span><br><span class="hljs-comment">#  10ms+ ###############################################################</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment"># EXPLAIN /*!50100 */ SELECT * FROM `test_table` WHERE `id` = 1;</span><br><span class="hljs-comment">#</span><br></code></pre></td></tr></table></figure><p>针对单条SQL进行剖析</p><figure class="highlight gams"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gams"><span class="hljs-function"><span class="hljs-title">EXPLAN</span></span> SELECT ...<br></code></pre></td></tr></table></figure><p>核心指标：</p><ul><li><code>type</code>：扫描类型（ALL &gt; index &gt; range &gt; ref &gt; eq_ref &gt; const）</li><li><code>key</code>：实际使用的索引</li><li><code>rows</code>：预估扫描行数</li><li><code>Extra</code>：<code>Using filesort</code>（文件排序）、<code>Using temporary</code>（临时表）</li></ul><h3 id="常见导致慢查询激增的原因"><a href="#常见导致慢查询激增的原因" class="headerlink" title="常见导致慢查询激增的原因"></a>常见导致慢查询激增的原因</h3><p><strong>索引缺失或失效</strong></p><p>避免索引失效：</p><ul><li>禁止对索引列使用函数</li><li>注意隐式类型转换</li></ul><p><strong>复杂查询与低效SQL</strong></p><ul><li>嵌套子查询导致衍生表</li><li><code>SELECT</code> 查询大量无用字段</li><li>多表<code>JOIN</code>未优化</li></ul><p>可采取的优化方案：拆分子查询或分批处理</p><p><strong>资源瓶颈</strong></p><p>常表现为CPU使用率过高、磁盘IO瓶颈、内存OOM</p><p>解决方向一是调优MySQL参数</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-attr">innodb_buffer_pool_size</span> = <span class="hljs-number">32</span>G  <span class="hljs-comment"># 通常设为物理内存的70%-80%</span><br><span class="hljs-attr">innodb_log_file_size</span> = <span class="hljs-number">2</span>G       <span class="hljs-comment"># 减少日志刷写频率</span><br><span class="hljs-attr">max_connections</span> = <span class="hljs-number">1000</span>         <span class="hljs-comment"># 避免连接风暴</span><br></code></pre></td></tr></table></figure><p>另一个方向是硬件升级，比如将硬盘升级为固态硬盘、增加内存容量、升级CPU核心数</p><p><strong>锁竞争与事务阻塞</strong></p><p>诊断方法</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SHOW</span> ENGINE INNODB STATUS; <span class="hljs-comment">-- 查看LATEST DETECTED DEADLOCK</span><br><br><span class="hljs-comment">-- 查看当前锁信息</span><br><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> information_schema.INNODB_LOCKS;<br><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> information_schema.INNODB_LOCK_WAITS;<br></code></pre></td></tr></table></figure><p>优化手段</p><ul><li>缩短事务：避免在事务中执行网络IO或耗时操作</li><li>降低隔离级别</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SET</span> SESSION TRANSACTION ISOLATION LEVEL READ COMMITTED;<br></code></pre></td></tr></table></figure><ul><li>索引优化：缩小锁范围</li></ul><p><strong>配置不当</strong></p><p>关键参数：</p><ul><li><code>tmp_table_size</code>：控制内存临时表大小</li><li><code>max_heap_table_size</code>：内存表最大尺寸</li><li><code>innodb_flush_method</code>：避免双缓冲，提升IO效率</li></ul><p><strong>数据量膨胀</strong></p><p>可以将历史数据进行归档处理，或对大表进行分表分库</p><h3 id="预防措施"><a href="#预防措施" class="headerlink" title="预防措施"></a>预防措施</h3><p><strong>读写分离</strong></p><p><strong>设置缓存策略</strong></p><p>如对热点数据使用Redis缓存</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"># 伪代码示例：先查缓存再查DB<br>def get_order(order_id):<br>    <span class="hljs-keyword">data</span> = redis.<span class="hljs-keyword">get</span>(f<span class="hljs-string">&quot;order:&#123;order_id&#125;&quot;</span>)<br>    <span class="hljs-keyword">if</span> not <span class="hljs-keyword">data</span>:<br>        <span class="hljs-keyword">data</span> = db.query(<span class="hljs-string">&quot;SELECT * FROM orders WHERE id = %s&quot;</span>, order_id)<br>        redis.setex(f<span class="hljs-string">&quot;order:&#123;order_id&#125;&quot;</span>, <span class="hljs-number">300</span>, <span class="hljs-keyword">data</span>)  # 缓存<span class="hljs-number">5</span>分钟<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">data</span><br></code></pre></td></tr></table></figure><p><strong>异步处理</strong></p><ul><li>将非实时操作（如日志记录、通知发送）写入消息队列</li><li>使用Binlog监听实现数据同步（Canal、Debezium）</li></ul>]]></content>
    
    
    <categories>
      
      <category>MySQL</category>
      
    </categories>
    
    
    <tags>
      
      <tag>MySQL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>MySQL主从架构中使用RESET MASTER的注意事项</title>
    <link href="/2025/03/15/MySQL%E4%B8%BB%E4%BB%8E%E6%9E%B6%E6%9E%84%E4%B8%AD%E4%BD%BF%E7%94%A8RESET-MASTER%E7%9A%84%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9/"/>
    <url>/2025/03/15/MySQL%E4%B8%BB%E4%BB%8E%E6%9E%B6%E6%9E%84%E4%B8%AD%E4%BD%BF%E7%94%A8RESET-MASTER%E7%9A%84%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9/</url>
    
    <content type="html"><![CDATA[<p>场景：小明误在MySQL从库执行了几条<code>INSERT</code>语句，然后为了掩盖操作，执行了<code>RESET MASTER</code>命令。之后系统自动触发了主从切换操作，原从库变成了新的主库。</p><p>现在有一个问题：主从切换后，原主库会出现什么问题？</p><p>首先理清一下发生了什么事：</p><ol><li>在原从库执行了<code>INSERT</code>操作，可能导致主从一致性被破坏</li><li>原从库执行了<code>RESET MASTER</code>命令，该命令会删除从库所有的binlog文件，并重置索引文件，然后创建新的binlog文件</li><li>主从切换，数据同步的方向发生改变</li></ol><p>简单回忆一下主从复制的流程：</p><ol><li>主库：事物提交 -&gt; 写入binlog -&gt; 发送binlog事件</li><li>从库：接收binlog -&gt; 写入relay log -&gt; SQL线程重放</li></ol><h3 id="可能导致的问题"><a href="#可能导致的问题" class="headerlink" title="可能导致的问题"></a>可能导致的问题</h3><p>在<code>INSERT</code>操作执行后，只写入了原从库的binlog中，但是小明又执行了<code>RESET MASTER</code>命令，导致包含<code>INSERT</code>操作的binlog被清除。当主从进行切换后，由于新主库的binlog被重置了，原主库无法获取到误操作的<code>INSERT</code>事件，导致新主库中存在这些数据又无法同步到原主库中，导致主从数据不一致。</p><p>此外，主从切换时，原主库会尝试从新主库当前binlog位置开始同步。如果原主库记录的旧主从复制信息（如<code>Relay_Master_Log_File</code>和<code>Exec_Master_Log_Pos</code>）与新主库的binlog不匹配，复制线程（SQL线程）会报错（如<code>Could not find first log file</code>）</p><p>若新主库后续写入的数据与原主库现有数据冲突（如主键重复），复制线程可能因为唯一键冲突而中断。</p><h3 id="紧急修复方案"><a href="#紧急修复方案" class="headerlink" title="紧急修复方案"></a>紧急修复方案</h3><p>第一步：终止数据分裂</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 所有从库执行</span><br><span class="hljs-comment">-- 停止主从同步，将从库设置为只读</span><br>STOP SLAVE;<br><span class="hljs-keyword">SET</span> <span class="hljs-keyword">GLOBAL</span> read_only <span class="hljs-operator">=</span> <span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><p>第二步：修复数据一致性</p><table><thead><tr><th>方案</th><th>优点</th><th>缺点</th></tr></thead><tbody><tr><td>mysqldump全量同步</td><td>数据绝对一致</td><td>停机时间长</td></tr><tr><td>pt-table-checksum</td><td>在线修复</td><td>第三方工具，需要学习</td></tr><tr><td>人工补齐</td><td>快速修复部分数据</td><td>容易遗漏隐藏数据</td></tr></tbody></table><p>这里简单列举pt-table-checksum的相关命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">校验数据差异</span><br>pt-table-checksum --databases=orders h=新主库IP<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">自动修复差异</span><br>pt-table-sync --execute h=新主库IP h=原主库IP<br></code></pre></td></tr></table></figure><p>第三步：重建复制链路</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 在新从库（原主库）执行</span><br>CHANGE MASTER <span class="hljs-keyword">TO</span><br>  MASTER_HOST<span class="hljs-operator">=</span><span class="hljs-string">&#x27;新主库IP&#x27;</span>,<br>  MASTER_LOG_FILE<span class="hljs-operator">=</span><span class="hljs-string">&#x27;binlog.000001&#x27;</span>,<br>  MASTER_LOG_POS<span class="hljs-operator">=</span><span class="hljs-number">4</span>;<br><span class="hljs-keyword">START</span> SLAVE;<br></code></pre></td></tr></table></figure><h3 id="预防措施"><a href="#预防措施" class="headerlink" title="预防措施"></a>预防措施</h3><p>为了预防此类操作再次发生，可采取以下措施。</p><p><strong>禁止从库写入数据</strong></p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs abnf">-- 永久配置（my.cnf）<br>[mysqld]<br>read_only <span class="hljs-operator">=</span> <span class="hljs-number">1</span><br>super_read_only <span class="hljs-operator">=</span> <span class="hljs-number">1</span><br><br>-- 动态生效<br>SET GLOBAL read_only <span class="hljs-operator">=</span> <span class="hljs-number">1</span><span class="hljs-comment">;</span><br>SET GLOBAL super_read_only <span class="hljs-operator">=</span> <span class="hljs-number">1</span><span class="hljs-comment">;</span><br></code></pre></td></tr></table></figure><p><strong>合理的权限管控</strong></p><p>比如应用所用到的账号，在主库只允许进行INSERT、SELECT、UPDATE操作，在从库只允许进行SELECT操作。允许运维或DBA账号在主库拥有SUPER权限，而在从库则无SUPER权限。</p><p><strong>开启审计</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 开启全量审计（需安装 audit plugin）</span><br>INSTALL PLUGIN audit_log SONAME <span class="hljs-string">&#x27;audit_log.so&#x27;</span>;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>MySQL</category>
      
    </categories>
    
    
    <tags>
      
      <tag>MySQL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>关于人生可能会遇见的问题</title>
    <link href="/2025/03/11/%E5%85%B3%E4%BA%8E%E4%BA%BA%E7%94%9F%E5%8F%AF%E8%83%BD%E4%BC%9A%E9%81%87%E8%A7%81%E7%9A%84%E9%97%AE%E9%A2%98/"/>
    <url>/2025/03/11/%E5%85%B3%E4%BA%8E%E4%BA%BA%E7%94%9F%E5%8F%AF%E8%83%BD%E4%BC%9A%E9%81%87%E8%A7%81%E7%9A%84%E9%97%AE%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<h1 id="关于人生可能会遇见的问题"><a href="#关于人生可能会遇见的问题" class="headerlink" title="关于人生可能会遇见的问题"></a>关于人生可能会遇见的问题</h1><p>人活一世，总能遇到些问题。我将这些问题大致分为两类。</p><p>一类是潜在问题，即尚未显现，但可以通过某些迹象预见到将来可能发生的问题。如长期不良的饮食习惯，或者熬夜等行为，虽然暂时没有对生活造成什么影响，但是日积月累会造成健康问题，可能会带来严重的后果。</p><p>另一类是我称之为显性问题，即已经出现在我们面前，对生活直接造成影响的问题。这里我认为显性问题也可以进行分类讨论。可分为能自行消解的问题和需要积极解决的问题。能自行消解的问题就是对你造成了影响，但即使你不去主动解决，它也会自己消失。而另外一种显性问题，如果你不积极面对，主动去解决它，它会一直存在，甚至会扩大影响，长期对你造成影响。</p><p>下面进行分别讨论。</p><h2 id="一、潜在问题"><a href="#一、潜在问题" class="headerlink" title="一、潜在问题"></a>一、潜在问题</h2><p>这里列举一些潜在问题的案例：</p><ul><li>年轻人的不良生活习惯，如暴饮暴食、作息不规律，可能导致肥胖、高血压等健康问题。</li><li>职场人士忽视技能更新，当面临职业转型时，发现自己缺乏竞争力。</li><li>金融机构过度发放次级贷款，在市场繁荣时期看似无害，但经济形势恶化时可能引发连锁反应。</li></ul><p>最好的做法是，在潜在问题还没有转化为显性问题时就将其解决，或者事先做好准备，等潜在问题暴露的时候，也能游刃有余地面对。</p><p>以下是一些应对方法：</p><ol><li>增长见识：多读书、多旅行，开阔视野，提高对潜在风险的敏感度。</li><li>持续学习：不断更新自己的知识和技能，保持竞争力。</li><li>拓展人脉：建立广泛的人际关系网，增加社会支持。</li><li>自我反省：定期审视自己的行为和决策，提前发现潜在风险。</li><li>提高观察力：培养敏锐的洞察力，预见未来可能出现的问题。</li><li>制定预案：提前准备好应对突发情况的计划，减少损失。</li><li>反思总结：从每次经历中吸取教训，避免重蹈覆辙。</li><li>关注心理健康：保持积极乐观的心态，有效管理压力。</li></ol><h2 id="二、显性问题"><a href="#二、显性问题" class="headerlink" title="二、显性问题"></a>二、显性问题</h2><p>之前提到过，我将显性问题分为能自行消解的问题和需要积极解决的问题。</p><p>举一些例子。能自行消解的问题，如：</p><ul><li>吃东西吃撑了，导致胃很不舒服，消化一段时间后，胃就不再像之前一样难受。</li><li>下雨了，但是没带伞，等到雨停了，你又能继续行程。</li></ul><p>需要积极解决的问题的案例：</p><ul><li>经济不景气导致的企业裁员，许多人在失业后长时间找不到工作，生活陷入困境。</li><li>上级分配的紧急且复杂的任务，给员工带来巨大的心理压力。</li><li>牙痛影响日常饮食和睡眠质量。</li></ul><p>当人们直观地感知到问题的存在时，很可能会产生如下的情绪或行为：</p><ul><li>后悔：总是想如果当初做了不同的选择就好了。</li><li>自我贬低：认为自己能力不足或运气不佳。</li><li>焦虑：对未来充满担忧，急于找到解决方案。</li><li>愤怒：对自我或他人的不满，甚至产生攻击行为。</li><li>沮丧：对解决问题失去信心，陷入绝望。</li><li>嫉妒：羡慕那些似乎没有遇到同样问题的人。</li><li>逃避：不愿意面对问题，选择回避。</li><li>自我封闭：切断与外界的联系，独自承受痛苦。</li></ul><p>一个很明显的事实是：<u><strong>以上的消极情绪，对问题的解决没有任何帮助！</strong></u>甚至可能导致问题的加剧。焦虑会影响思考，愤怒会产生矛盾，自我贬低和沮丧绝望会影响心理健康。你沉浸在消极情绪中无法自拔，但问题依旧存在。</p><p>那么，该如何以正确的方式应对这些显性问题，我认为有如下的方式：</p><ol><li>保持冷静：冷静的头脑有助于理性分析问题，找到解决办法。</li><li>保持积极：相信自己有能力克服困难，保持乐观的心态。</li><li>正视问题：承认问题的存在，不逃避，勇敢面对。</li><li>深入分析：全面、客观地分析问题的根源，制定有效的解决方案。</li><li>问题拆解：将复杂的问题分解成若干个小问题，逐一解决。</li><li>寻求帮助：利用团队的力量，共同解决问题。</li><li>接受现实：对于超出个人控制范围的问题，学会放手，专注于自己能够改变的部分。</li></ol><p>以上即为我个人对人生可能遇见的问题的看法。</p>]]></content>
    
    
    <categories>
      
      <category>杂谈</category>
      
    </categories>
    
    
    <tags>
      
      <tag>杂谈</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Easy Mock的部署及使用</title>
    <link href="/2024/03/27/Easy-Mock%E7%9A%84%E9%83%A8%E7%BD%B2%E5%8F%8A%E4%BD%BF%E7%94%A8/"/>
    <url>/2024/03/27/Easy-Mock%E7%9A%84%E9%83%A8%E7%BD%B2%E5%8F%8A%E4%BD%BF%E7%94%A8/</url>
    
    <content type="html"><![CDATA[<h1 id="Easy-Mock的部署及使用"><a href="#Easy-Mock的部署及使用" class="headerlink" title="Easy Mock的部署及使用"></a>Easy Mock的部署及使用</h1><p>Easy Mock 是一个可视化，并且能快速生成<strong>模拟数据</strong>的持久化服务。</p><p>GitHub地址：<a href="https://github.com/easy-mock/easy-mock">https://github.com/easy-mock/easy-mock</a></p><p>中文介绍文档：<a href="https://github.com/easy-mock/easy-mock/blob/dev/README.zh-CN.md">https://github.com/easy-mock/easy-mock/blob/dev/README.zh-CN.md</a></p><h2 id="一、部署"><a href="#一、部署" class="headerlink" title="一、部署"></a>一、部署</h2><h3 id="1-传统部署"><a href="#1-传统部署" class="headerlink" title="1. 传统部署"></a>1. 传统部署</h3><blockquote><p>建议使用docker部署，传统部署坑太多了</p></blockquote><p>参考：<a href="https://coder.itclan.cn/fontend/tools/local-deploy-easy-mock/#%E5%89%8D%E8%A8%80">https://coder.itclan.cn/fontend/tools/local-deploy-easy-mock/#%E5%89%8D%E8%A8%80</a></p><h4 id="1-1-安装Redis"><a href="#1-1-安装Redis" class="headerlink" title="1.1 安装Redis"></a>1.1 安装Redis</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">下载源码包</span><br>version=&#x27;6.0.9&#x27;<br>wget https://download.redis.io/releases/redis-$&#123;version&#125;.tar.gz<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">安装依赖</span><br>yum install gcc gcc-c++ make -y<br>yum install centos-release-scl -y<br>yum install devtoolset-9-gcc devtoolset-9-gcc-c++ devtoolset-9-binutils -y<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">启用gcc9</span><br>scl enable devtoolset-9 bash<br>echo &quot;source /opt/rh/devtoolset-9/enable&quot; &gt;&gt; /etc/profile<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">解压源码包</span><br>tar xf redis-$&#123;version&#125;.tar.gz<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">编译安装</span><br>cd redis-$&#123;version&#125;<br>make -j 2<br>make PREFIX=/usr/local/redis install<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">修改系统参数</span><br>echo net.core.somaxconn=511 &gt;&gt; /etc/sysctl.conf<br>echo vm.overcommit_memory=1 &gt;&gt; /etc/sysctl.conf<br>sysctl -p<br>echo never &gt; /sys/kernel/mm/transparent_hugepage/enabled<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">添加配置文件</span><br>mkdir /usr/local/redis/conf<br>cat &gt; /usr/local/redis/conf/redis.conf &lt;&lt; EOF<br>bind 127.0.0.1<br>protected-mode yes<br>port 6379<br>tcp-backlog 511<br>timeout 0<br>tcp-keepalive 300<br>daemonize no<br>supervised no<br>pidfile /var/run/redis_6379.pid<br>loglevel notice<br>logfile &quot;&quot;<br>databases 16<br>always-show-logo yes<br>save 900 1<br>save 300 10<br>save 60 10000<br>stop-writes-on-bgsave-error yes<br>rdbcompression yes<br>rdbchecksum yes<br>dbfilename dump.rdb<br>rdb-del-sync-files no<br>dir ./<br>replica-serve-stale-data yes<br>replica-read-only yes<br>repl-diskless-sync no<br>repl-diskless-sync-delay 5<br>repl-diskless-load disabled<br>repl-disable-tcp-nodelay no<br>replica-priority 100<br>acllog-max-len 128<br>lazyfree-lazy-eviction no<br>lazyfree-lazy-expire no<br>lazyfree-lazy-server-del no<br>replica-lazy-flush no<br>lazyfree-lazy-user-del no<br>oom-score-adj no<br>oom-score-adj-values 0 200 800<br>appendonly no<br>appendfilename &quot;appendonly.aof&quot;<br>appendfsync everysec<br>no-appendfsync-on-rewrite no<br>auto-aof-rewrite-percentage 100<br>auto-aof-rewrite-min-size 64mb<br>aof-load-truncated yes<br>aof-use-rdb-preamble yes<br>lua-time-limit 5000<br>slowlog-log-slower-than 10000<br>slowlog-max-len 128<br>latency-monitor-threshold 0<br>notify-keyspace-events &quot;&quot;<br>hash-max-ziplist-entries 512<br>hash-max-ziplist-value 64<br>list-max-ziplist-size -2<br>list-compress-depth 0<br>set-max-intset-entries 512<br>zset-max-ziplist-entries 128<br>zset-max-ziplist-value 64<br>hll-sparse-max-bytes 3000<br>stream-node-max-bytes 4096<br>stream-node-max-entries 100<br>activerehashing yes<br>client-output-buffer-limit normal 0 0 0<br>client-output-buffer-limit replica 256mb 64mb 60<br>client-output-buffer-limit pubsub 32mb 8mb 60<br>hz 10<br>dynamic-hz yes<br>aof-rewrite-incremental-fsync yes<br>rdb-save-incremental-fsync yes<br>jemalloc-bg-thread yes<br>EOF<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">启动redis</span><br>mkdir /usr/local/redis/logs<br>nohup /usr/local/redis/bin/redis-server /usr/local/redis/conf/redis.conf &gt;&gt; /usr/local/redis/logs/redis.log 2&gt;&amp;1 &amp;<br></code></pre></td></tr></table></figure><h4 id="1-2-安装MongoDB"><a href="#1-2-安装MongoDB" class="headerlink" title="1.2 安装MongoDB"></a>1.2 安装MongoDB</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">下载二进制包</span><br>wget https://fastdl.mongodb.org/linux/mongodb-linux-x86_64-rhel70-5.0.3.tgz<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">解压</span><br>tar -xf mongodb-linux-x86_64-rhel70-5.0.3.tgz<br>mv mongodb-linux-x86_64-rhel70-5.0.3 /usr/local/mongodb<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">新建数据目录、日志目录和配置文件目录</span><br>mkdir /usr/local/mongodb/&#123;data,logs,conf&#125;<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">添加配置文件</span><br>cat &gt; /usr/local/mongodb/conf/mongo.conf &lt;&lt; EOF<br>port=27017<br>dbpath=/usr/local/mongodb/data<br>logpath=/usr/local/mongodb/logs/mongod.log<br>pidfilepath=/usr/local/mongodb/mongod.pid<br>logappend=true<br>fork=true<br>journal=true<br>bind_ip=localhost<br>EOF<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">启动MongoDB</span><br>/usr/local/mongodb/bin/mongod --config /usr/local/mongodb/conf/mongo.conf<br></code></pre></td></tr></table></figure><h4 id="1-3-部署easy-mock"><a href="#1-3-部署easy-mock" class="headerlink" title="1.3 部署easy-mock"></a>1.3 部署easy-mock</h4><p>需要先安装git和nodejs</p><p>注意：要在Redis和MongoDB已经启动的条件下部署easy-mock</p><p>第一步：从GitHub拉取easy-mock</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">git <span class="hljs-built_in">clone</span> https://github.com/easy-mock/easy-mock.git<br><br><span class="hljs-built_in">cd</span> easy-mock &amp;&amp; npm install<br></code></pre></td></tr></table></figure><p>第二步：修改配置文件easy-mock&#x2F;config&#x2F;default.json</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;port&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">7300</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-comment">// 将此处的&quot;host&quot;: &quot;0.0.0.0&quot;修改为localhost</span><br>  <span class="hljs-attr">&quot;host&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;localhost&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;pageSize&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">30</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;proxy&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">false</span></span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;db&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;mongodb://localhost/easy-mock&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;unsplashClientId&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;redis&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;keyPrefix&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;[Easy Mock]&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;port&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">6379</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;host&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;localhost&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;password&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;db&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">0</span><br>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;blackList&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;projects&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;ips&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><span class="hljs-punctuation">]</span><br>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;rateLimit&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;max&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">1000</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;duration&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">1000</span><br>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;jwt&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;expire&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;14 days&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;secret&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;shared-secret&quot;</span><br>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;upload&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;types&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><span class="hljs-string">&quot;.jpg&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-string">&quot;.jpeg&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-string">&quot;.png&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-string">&quot;.gif&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-string">&quot;.json&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-string">&quot;.yml&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-string">&quot;.yaml&quot;</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;size&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">5242880</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;dir&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;../public/upload&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;expire&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;types&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><span class="hljs-string">&quot;.json&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-string">&quot;.yml&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-string">&quot;.yaml&quot;</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;day&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">-1</span><br>    <span class="hljs-punctuation">&#125;</span><br>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;ldap&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;server&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;bindDN&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;password&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;filter&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;base&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;attributeName&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;&quot;</span><br>    <span class="hljs-punctuation">&#125;</span><br>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;fe&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;copyright&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;storageNamespace&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;easy-mock_&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;timeout&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">25000</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;publicPath&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;/dist/&quot;</span><br>  <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p>启动easy-mock</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">npm <span class="hljs-built_in">run</span> dev<br></code></pre></td></tr></table></figure><h3 id="2-Docker部署Easy-Mock"><a href="#2-Docker部署Easy-Mock" class="headerlink" title="2. Docker部署Easy Mock"></a>2. Docker部署Easy Mock</h3><p>官方GitHub仓库：<a href="https://github.com/easy-mock/easy-mock-docker">https://github.com/easy-mock/easy-mock-docker</a></p><p>参考：<a href="https://juejin.cn/post/7081459518642585613">https://juejin.cn/post/7081459518642585613</a></p><p>需要先安装好docker和docker-compose</p><p>创建docker-compose.yml</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">version:</span> <span class="hljs-string">&#x27;3&#x27;</span><br><br><span class="hljs-attr">services:</span><br>  <span class="hljs-attr">mongodb:</span><br>    <span class="hljs-attr">image:</span> <span class="hljs-string">mongo:3.4.1</span><br>    <span class="hljs-attr">volumes:</span><br>      <span class="hljs-comment">#  /apps/easy-mock/data/db 是数据库文件存放地址，根据需要修改为本地地址</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">&#x27;/apps/easy-mock/data/db:/data/db&#x27;</span><br>    <span class="hljs-attr">networks:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">easy-mock</span><br>    <span class="hljs-attr">restart:</span> <span class="hljs-string">always</span><br><br>  <span class="hljs-attr">redis:</span><br>    <span class="hljs-attr">image:</span> <span class="hljs-string">redis:4.0.6</span><br>    <span class="hljs-attr">command:</span> <span class="hljs-string">redis-server</span> <span class="hljs-string">--appendonly</span> <span class="hljs-literal">yes</span><br>    <span class="hljs-attr">volumes:</span><br>      <span class="hljs-comment">#  /apps/easy-mock/data/redis 是 redis 数据文件存放地址，根据需要修改为本地地址</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">&#x27;/apps/easy-mock/data/redis:/data&#x27;</span><br>    <span class="hljs-attr">networks:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">easy-mock</span><br>    <span class="hljs-attr">restart:</span> <span class="hljs-string">always</span><br><br>  <span class="hljs-attr">web:</span><br>    <span class="hljs-attr">image:</span> <span class="hljs-string">easymock/easymock:1.6.0</span><br>    <span class="hljs-comment"># easy-mock 官方给出的文件，这里是 npm start，这里修改为 npm run dev</span><br>    <span class="hljs-attr">command:</span> <span class="hljs-string">/bin/bash</span> <span class="hljs-string">-c</span> <span class="hljs-string">&quot;npm run dev&quot;</span><br>    <span class="hljs-attr">ports:</span> <br>      <span class="hljs-bullet">-</span> <span class="hljs-number">7300</span><span class="hljs-string">:7300</span><br>    <span class="hljs-attr">volumes:</span><br>      <span class="hljs-comment"># 日志地址，根据需要修改为本地地址</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">&#x27;/apps/easy-mock/logs:/home/easy-mock/easy-mock/logs&#x27;</span><br>    <span class="hljs-attr">networks:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">easy-mock</span><br>    <span class="hljs-attr">restart:</span> <span class="hljs-string">always</span><br><br><span class="hljs-attr">networks:</span><br>  <span class="hljs-attr">easy-mock:</span><br></code></pre></td></tr></table></figure><p>启动</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">docker-compose up -d</span><br></code></pre></td></tr></table></figure><p>访问<a href="http://ip:7300/">http://ip:7300</a></p><p><img src="https://pic1.imgdb.cn/item/67d3857388c538a9b5bc9555.png"></p><h2 id="二、使用Easy-Mock"><a href="#二、使用Easy-Mock" class="headerlink" title="二、使用Easy Mock"></a>二、使用Easy Mock</h2><p>可用的在线的easymock页面：<a href="https://mock.mengxuegu.com/login">https://mock.mengxuegu.com/login</a></p><p><a href="mailto:&#104;&#117;&#97;&#x6e;&#x67;&#x2e;&#x7a;&#x79;&#x6e;&#x40;&#113;&#113;&#x2e;&#x63;&#x6f;&#109;">huang.zyn@qq.com</a>&#x2F;<a href="mailto:&#x68;&#117;&#x61;&#110;&#x67;&#x2e;&#x7a;&#x79;&#x6e;&#x40;&#113;&#113;&#46;&#99;&#111;&#x6d;">huang.zyn@qq.com</a></p><h3 id="1-登录注册"><a href="#1-登录注册" class="headerlink" title="1. 登录注册"></a>1. 登录注册</h3><p>略</p><h3 id="2-创建项目"><a href="#2-创建项目" class="headerlink" title="2. 创建项目"></a>2. 创建项目</h3><p><img src="https://pic1.imgdb.cn/item/67d385c488c538a9b5bc9576.png"></p><p><img src="https://pic1.imgdb.cn/item/67d385e088c538a9b5bc9589.png"></p><h3 id="3-创建接口"><a href="#3-创建接口" class="headerlink" title="3. 创建接口"></a>3. 创建接口</h3><p><img src="https://pic1.imgdb.cn/item/67d3860d88c538a9b5bc95bf.png"></p><p><img src="https://pic1.imgdb.cn/item/67d3862288c538a9b5bc95e8.png"></p>]]></content>
    
    
    <categories>
      
      <category>前端</category>
      
    </categories>
    
    
    <tags>
      
      <tag>前端</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Python程序退出问题</title>
    <link href="/2024/03/19/Python%E7%A8%8B%E5%BA%8F%E9%80%80%E5%87%BA%E9%97%AE%E9%A2%98/"/>
    <url>/2024/03/19/Python%E7%A8%8B%E5%BA%8F%E9%80%80%E5%87%BA%E9%97%AE%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<p>在编写Python代码时，涉及到退出程序逻辑，会使用到<code>exit()</code>。在交互式控制台中，退出的提示就是使用<code>Ctrl + D</code>或<code>exit()</code>进行退出</p><p>当你通过<code>python script.py</code>命令手动执行代码时，执行到<code>exit()</code>这里，程序会和预期一样退出</p><p>可是当你使用pyinstaller将代码打包成了一个可执行程序，问题就出现了。程序执行到<code>exit()</code>的时候，抛出了一个错误：<code>NameError: name &#39;exit&#39; is not defined</code></p><p>它告诉你：<code>exit</code>这个函数没有被定义。</p><p>这是因为标准的Python库中并没有名为<code>exit</code>的内置函数，打包前执行程序时调用的<code>exit()</code>实际上是交互式环境提供的扩展功能，使用pyinstaller打包并不会将它打包进去。</p><p><strong>如何解决这一问题？</strong></p><p>可以使用<code>sys.exit()</code>方法（使用前别忘了<code>import sys</code>）。</p><p><code>sys.exit()</code>可以接收一个可选参数，表示程序的退出状态码。</p><ul><li>如果没有参数传入或传入的参数为<code>0</code>，即<code>sys.exit()</code>或<code>sys.exit(0)</code>，表示程序正常退出。</li><li>如果传入的是一个非零参数，如<code>sys.exit(-1)</code>，通常用于指示程序由于某种类型的错误或异常情况退出。</li></ul>]]></content>
    
    
    <categories>
      
      <category>Python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Kubernetes更新证书</title>
    <link href="/2023/08/24/Kubernetes%E6%9B%B4%E6%96%B0%E8%AF%81%E4%B9%A6/"/>
    <url>/2023/08/24/Kubernetes%E6%9B%B4%E6%96%B0%E8%AF%81%E4%B9%A6/</url>
    
    <content type="html"><![CDATA[<div class="note note-info">            <p>本文首发于博客园：<a href="https://www.cnblogs.com/CharrammaBlog/p/17653321.html">https://www.cnblogs.com/CharrammaBlog/p/17653321.html</a></p>          </div><h1 id="Kubernetes更新证书"><a href="#Kubernetes更新证书" class="headerlink" title="Kubernetes更新证书"></a>Kubernetes更新证书</h1><p>执行kubectl命令时，报<code>error: You must be logged in to the server (Unauthorized)</code>错误。<br>这是因为Kubernetes证书过期了。</p><p>可以使用如下命令查看证书有效时间</p><figure class="highlight smali"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs smali"><span class="hljs-comment"># 1.19及以下版本的Kubernetes</span><br>kubeadm alpha certs<span class="hljs-built_in"> check-expiration</span><br><span class="hljs-built_in"></span><br><span class="hljs-comment"># 1.20及以上版本的Kubernetes</span><br>kubeadm certs check-expiration<br></code></pre></td></tr></table></figure><p>更新证书</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-comment"># &lt;= 1.19</span><br><span class="hljs-attribute">kubeadm</span> alpha certs renew <span class="hljs-literal">all</span><br><br><span class="hljs-comment"># &gt;= 1.20</span><br><span class="hljs-attribute">kubeadm</span> certs renew <span class="hljs-literal">all</span><br></code></pre></td></tr></table></figure><p>更新证书完成后，重启kubernetes组件</p><figure class="highlight coq"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs coq">docker ps |<span class="hljs-type">grep</span> -E &#x27;k8s_kube-apiserver|<span class="hljs-type">k8s_kube</span>-controller-manager|<span class="hljs-type">k8s_kube</span>-scheduler|<span class="hljs-type">k8s_etcd_etcd</span>&#x27; | <span class="hljs-type">awk</span> -F &#x27; &#x27; &#x27;&#123;print $<span class="hljs-number">1</span>&#125;&#x27; | <span class="hljs-type">xargs</span> docker restart<br><br>systemctl restart kubelet<br></code></pre></td></tr></table></figure><p>更新kubectl控制文件</p><figure class="highlight mel"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs mel">mv /root/.kube/config /root/.kube/config-$(<span class="hljs-keyword">date</span> +%Y%m%d%H%M%S)<br>cp /etc/kubernetes/admin.conf /root/.kube/config<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>kubernetes</category>
      
    </categories>
    
    
    <tags>
      
      <tag>kubernetes</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>为Python脚本添加命令行参数-argparse模块</title>
    <link href="/2023/03/07/%E4%B8%BAPython%E8%84%9A%E6%9C%AC%E6%B7%BB%E5%8A%A0%E5%91%BD%E4%BB%A4%E8%A1%8C%E5%8F%82%E6%95%B0-argparse%E6%A8%A1%E5%9D%97/"/>
    <url>/2023/03/07/%E4%B8%BAPython%E8%84%9A%E6%9C%AC%E6%B7%BB%E5%8A%A0%E5%91%BD%E4%BB%A4%E8%A1%8C%E5%8F%82%E6%95%B0-argparse%E6%A8%A1%E5%9D%97/</url>
    
    <content type="html"><![CDATA[<p>如果希望Python脚本执行的时候可以带上参数，如<br><code>python test.py --help</code><br><code>python test.py -a</code><br><code>python test.py --version</code><br>可以使用<code>argparse</code>模块的<code>ArgumentParser</code>类来实现。</p><p>示例：</p><p>test.py</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> argparse<br><br>parser = argparse.ArgumentParser(prog=<span class="hljs-string">&#x27;myprogram&#x27;</span>, description=<span class="hljs-string">&#x27;这些描述内容会在执行--help时显示.&#x27;</span>)<br><span class="hljs-comment"># 定义了一个无需指定值的参数-a</span><br>parser.add_argument(<span class="hljs-string">&#x27;-a&#x27;</span>, action=<span class="hljs-string">&#x27;store_true&#x27;</span>, <span class="hljs-built_in">help</span>=<span class="hljs-string">&#x27;option a&#x27;</span>)<br><span class="hljs-comment"># 定义了一个需要给一个整数作为值的参数b</span><br><span class="hljs-comment"># 使用-b 123 或者 -b=123 给值</span><br>parser.add_argument(<span class="hljs-string">&#x27;-b&#x27;</span>, action=<span class="hljs-string">&#x27;store&#x27;</span>, dest=<span class="hljs-string">&#x27;value_of_b&#x27;</span>, <span class="hljs-built_in">type</span>=<span class="hljs-built_in">int</span>, <span class="hljs-built_in">help</span>=<span class="hljs-string">&#x27;option b&#x27;</span>)<br><span class="hljs-comment"># 让-V和--version都可以打印版本信息</span><br>parser.add_argument(<span class="hljs-string">&#x27;-V&#x27;</span>, <span class="hljs-string">&#x27;--version&#x27;</span>, action=<span class="hljs-string">&#x27;version&#x27;</span>, version=<span class="hljs-string">&#x27;%(prog)s 1.0&#x27;</span>)<br><br><span class="hljs-comment"># 解析命令行参数</span><br>args = parser.parse_args()<br><br><span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> <span class="hljs-built_in">any</span>(<span class="hljs-built_in">vars</span>(args).values()):<br>    <span class="hljs-comment"># 如果没有接任何参数，打印帮助信息</span><br>parser.print_help()<br><span class="hljs-keyword">else</span>:<br>    <span class="hljs-comment"># 没有显式指定dest，默认将参数名设置为dest的值</span><br>    <span class="hljs-keyword">if</span> args.a:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;option a is set&#x27;</span>)<br>    <span class="hljs-keyword">if</span> args.value_of_b:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;the value of option b is: &#x27;</span>, args.value_of_b)<br></code></pre></td></tr></table></figure><p>test.py执行示例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># python3 test.py --help</span><br>usage: myprogram [-h] [-a] [-b VALUE_OF_B] [-V]<br><br>这些描述内容会在执行--<span class="hljs-built_in">help</span>时显示.<br><br>optional arguments:<br>  -h, --<span class="hljs-built_in">help</span>     show this <span class="hljs-built_in">help</span> message <span class="hljs-keyword">and</span> exit<br>  -a             option a<br>  -b VALUE_OF_B  option b<br>  -V, --version  show program<span class="hljs-string">&#x27;s version number and exit</span><br></code></pre></td></tr></table></figure><p><code>argparse.ArgumentParser()</code>可选参数：</p><ul><li><code>prog</code>：该程序的名称（默认情况下，将从 sys.argv[0] 中获取该名称，即脚本名）。</li><li><code>usage</code>：程序用法的简短描述，如果不指定，则默认为从参数定义生成的描述。</li><li><code>description</code>：程序的简要描述。</li><li><code>epilog</code>：程序的结尾文本，通常用于提供更多信息。</li><li><code>parents</code>：一组父级 ArgumentParser 对象，这些对象中定义的所有参数也将包含在该对象中。</li><li><code>formatter_class</code>：用于自定义帮助信息格式的类。</li><li><code>prefix_chars</code>：用于标识命令行选项的前缀字符，默认为 ‘-‘。</li><li><code>fromfile_prefix_chars</code>：用于指定读取参数值列表的文件的前缀字符，默认为 ‘@’。</li><li><code>argument_default</code>：用于设置参数的默认值。</li><li><code>conflict_handler</code>：用于处理参数定义之间的冲突的策略。</li><li><code>add_help</code>：是否添加 -h&#x2F;–help 选项来显示帮助信息。默认为 True。可以在想自定义<code>-h</code>参数时使用此参数，禁用默认的帮助信息选项，然后再手动定义一个参数用于显示帮助信息选项，让<code>-h</code>实现自定义的功能。</li></ul><p><code>parser.add_argument()</code>可选参数：</p><ul><li><code>name or flags</code>: 参数的名称或标志，例如 -f 或 –file。可以使用逗号分隔的多个选项来表示同一个参数的多个名称或标志。</li><li><code>action</code>: 定义参数被指定时的行为，可以使用以下值：<ul><li><code>store</code>: 将参数值保存到一个属性中。</li><li><code>store_const</code>: 将指定的常量值保存到一个属性中。</li><li><code>store_true</code>: 将 True 值保存到一个属性中。</li><li><code>store_false</code>: 将 False 值保存到一个属性中。</li><li><code>append</code>: 将参数值追加到一个列表中。</li><li><code>append_const</code>: 将指定的常量值追加到一个列表中。</li><li><code>count</code>: 统计指定参数出现的次数。</li><li><code>version</code>: 打印程序的版本信息并退出。</li><li><code>help</code>: 打印帮助信息并退出。</li></ul></li><li><code>nargs</code>: 参数接受的值的数量，可以使用以下值：<ul><li><code>N</code>: 接受固定数量的参数值。</li><li><code>?</code>: 接受一个可选的参数值。</li><li><code>*</code>: 接受任意数量的参数值，将值保存到一个列表中。</li><li><code>+</code>: 接受一个或多个参数值，将值保存到一个列表中。</li></ul></li><li><code>const</code>: 存储在参数中的常量值。</li><li><code>default</code>: 参数的默认值。</li><li><code>type</code>: 参数的类型，可以是内置类型（例如 int 或 float），也可以是自定义类型（例如解析一个字符串并返回一个自定义对象）。<ul><li><code>str</code>：将命令行参数解析为字符串类型（默认）。</li><li><code>int</code>：将命令行参数解析为整数类型。</li><li><code>float</code>：将命令行参数解析为浮点数类型。</li><li><code>complex</code>：将命令行参数解析为复数类型。</li><li><code>list</code>：将命令行参数解析为列表类型。例如 -l 1 2 3 可以解析成 [1, 2, 3]。</li><li><code>tuple</code>：将命令行参数解析为元组类型。例如 -t 1 2 3 可以解析成 (1, 2, 3)。</li><li><code>file</code>：将命令行参数解析为文件类型。例如 -f input.txt 将打开 input.txt 文件并返回文件对象。</li><li>自定义函数：可以传递一个自定义函数来将命令行参数解析为指定的类型。函数应该接受一个参数（要解析的值），并返回解析后的结果。例如，type&#x3D;lambda x: x.upper() 将所有字符串转换为大写字符串</li></ul></li><li><code>choices</code>: 参数可以接受的值的列表或元组。</li><li><code>required</code>: 是否需要该参数。</li><li><code>help</code>: 参数的帮助文本。</li><li><code>metavar</code>: 在帮助文本中使用的参数值占位符。</li><li><code>dest</code>: 存储参数值的属性名称。</li><li><code>const</code>: 指定一个常量值，仅在 action&#x3D;’store_const’ 时使用。</li><li><code>version</code>: 程序版本信息，仅在 action&#x3D;’version’ 时使用。</li></ul><blockquote><p>注意：两个不同参数的dest值不能一样，会有冲突！</p></blockquote><p>写一个吃饱了没事做的脚本：</p><p>db_connect.py</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> argparse<br><span class="hljs-keyword">import</span> os<br><br>parser = argparse.ArgumentParser(prog=<span class="hljs-string">&#x27;mysql_connect&#x27;</span>, description=<span class="hljs-string">&#x27;这是一个吃饱了没事做的脚本&#x27;</span>)<br>parser.add_argument(<span class="hljs-string">&#x27;-u&#x27;</span>, action=<span class="hljs-string">&#x27;store&#x27;</span>, dest=<span class="hljs-string">&#x27;user&#x27;</span>, <span class="hljs-built_in">type</span>=<span class="hljs-built_in">str</span>, required=<span class="hljs-literal">True</span>, <span class="hljs-built_in">help</span>=<span class="hljs-string">&#x27;mysql user&#x27;</span>)<br>parser.add_argument(<span class="hljs-string">&#x27;-p&#x27;</span>, action=<span class="hljs-string">&#x27;store&#x27;</span>, dest=<span class="hljs-string">&#x27;password&#x27;</span>, <span class="hljs-built_in">type</span>=<span class="hljs-built_in">str</span>, required=<span class="hljs-literal">True</span>, <span class="hljs-built_in">help</span>=<span class="hljs-string">&#x27;mysql password&#x27;</span>)<br>parser.add_argument(<span class="hljs-string">&#x27;-P&#x27;</span>, action=<span class="hljs-string">&#x27;store&#x27;</span>, dest=<span class="hljs-string">&#x27;port&#x27;</span>, <span class="hljs-built_in">type</span>=<span class="hljs-built_in">str</span>, default=<span class="hljs-string">&#x27;3306&#x27;</span>, <span class="hljs-built_in">help</span>=<span class="hljs-string">&#x27;mysql port&#x27;</span>)<br>parser.add_argument(<span class="hljs-string">&#x27;--host&#x27;</span>, action=<span class="hljs-string">&#x27;store&#x27;</span>, dest=<span class="hljs-string">&#x27;host&#x27;</span>, <span class="hljs-built_in">type</span>=<span class="hljs-built_in">str</span>, default=<span class="hljs-string">&#x27;127.0.0.1&#x27;</span>, <span class="hljs-built_in">help</span>=<span class="hljs-string">&#x27;mysql host&#x27;</span>)<br>parser.add_argument(<span class="hljs-string">&#x27;-V&#x27;</span>, <span class="hljs-string">&#x27;--version&#x27;</span>, action=<span class="hljs-string">&#x27;version&#x27;</span>, version=<span class="hljs-string">&#x27;%(prog)s 1.0&#x27;</span>)<br><br>args = parser.parse_args()<br><br>os.system(<span class="hljs-string">f&quot;mysql -h<span class="hljs-subst">&#123;args.host&#125;</span> -P<span class="hljs-subst">&#123;args.port&#125;</span> -u<span class="hljs-subst">&#123;args.user&#125;</span> -p<span class="hljs-subst">&#123;args.password&#125;</span>&quot;</span>)<br></code></pre></td></tr></table></figure><p>执行效果：</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"># python3 db_connect.py <span class="hljs-comment">--host=localhost -u=root -123456 -P3306</span><br>mysql: [<span class="hljs-built_in">Warning</span>] <span class="hljs-keyword">Using</span> a <span class="hljs-keyword">password</span> <span class="hljs-keyword">on</span> the command <span class="hljs-type">line</span> interface can be insecure.<br>Welcome <span class="hljs-keyword">to</span> the MySQL monitor.  Commands <span class="hljs-keyword">end</span> <span class="hljs-keyword">with</span> ; <span class="hljs-keyword">or</span> \g.<br>Your MySQL <span class="hljs-keyword">connection</span> id <span class="hljs-keyword">is</span> <span class="hljs-number">2</span><br><span class="hljs-keyword">Server</span> <span class="hljs-keyword">version</span>: <span class="hljs-number">5.7</span><span class="hljs-number">.29</span>-<span class="hljs-keyword">log</span> MySQL Community <span class="hljs-keyword">Server</span> (GPL)<br><br>Copyright (c) <span class="hljs-number">2000</span>, <span class="hljs-number">2020</span>, Oracle <span class="hljs-keyword">and</span>/<span class="hljs-keyword">or</span> its affiliates. <span class="hljs-keyword">All</span> rights reserved.<br><br>Oracle <span class="hljs-keyword">is</span> a registered trademark <span class="hljs-keyword">of</span> Oracle Corporation <span class="hljs-keyword">and</span>/<span class="hljs-keyword">or</span> its<br>affiliates. Other names may be trademarks <span class="hljs-keyword">of</span> their respective<br>owners.<br><br><span class="hljs-keyword">Type</span> <span class="hljs-string">&#x27;help;&#x27;</span> <span class="hljs-keyword">or</span> <span class="hljs-string">&#x27;\h&#x27;</span> <span class="hljs-keyword">for</span> help. <span class="hljs-keyword">Type</span> <span class="hljs-string">&#x27;\c&#x27;</span> <span class="hljs-keyword">to</span> clear the <span class="hljs-keyword">current</span> <span class="hljs-keyword">input</span> <span class="hljs-keyword">statement</span>.<br><br>root@localhost [(<span class="hljs-keyword">none</span>)]&gt;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Canal读取不到binlog的解决办法</title>
    <link href="/2023/02/16/Canal%E8%AF%BB%E5%8F%96%E4%B8%8D%E5%88%B0binlog%E7%9A%84%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95/"/>
    <url>/2023/02/16/Canal%E8%AF%BB%E5%8F%96%E4%B8%8D%E5%88%B0binlog%E7%9A%84%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<div class="note note-info">            <p>本文首发于博客园：<a href="https://www.cnblogs.com/CharrammaBlog/p/17127049.html">https://www.cnblogs.com/CharrammaBlog/p/17127049.html</a></p>          </div><h1 id="Canal读取不到binlog的解决办法"><a href="#Canal读取不到binlog的解决办法" class="headerlink" title="Canal读取不到binlog的解决办法"></a>Canal读取不到binlog的解决办法</h1><p>最近带了个新人，给了他一套新部署还没正式上线的环境让他负责运维，今天测试的同事在在群里说MQ消息推送不过去了。</p><p>我帮着排查一下，按我的经验，通常是Canal的问题，于是我瞅了眼Canal的日志，果然报错了。<br>关键的错误就是这一句：</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs vim">java.io.IOException: Received error packet: errno = <span class="hljs-number">1236</span>, sqlstate = HY000 errmsg = Could not <span class="hljs-keyword">find</span> <span class="hljs-keyword">first</span> <span class="hljs-built_in">log</span> <span class="hljs-keyword">file</span> name in binary <span class="hljs-built_in">log</span> <span class="hljs-built_in">index</span> <span class="hljs-keyword">file</span><br></code></pre></td></tr></table></figure><p>这是说读取不到binlog了。</p><p>按日志里的信息，该Topic在读取的binlog和位点分别是mysql-bin.000010和984601。</p><figure class="highlight clojure"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs clojure">&#123;<span class="hljs-string">&quot;identity&quot;</span>:&#123;<span class="hljs-string">&quot;slaveId&quot;</span><span class="hljs-symbol">:-1</span><span class="hljs-punctuation">,</span><span class="hljs-string">&quot;sourceAddress&quot;</span>:&#123;<span class="hljs-string">&quot;address&quot;</span>:<span class="hljs-string">&quot;mid1&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-string">&quot;port&quot;</span>:<span class="hljs-number">3306</span>&#125;&#125;<span class="hljs-punctuation">,</span><span class="hljs-string">&quot;postion&quot;</span>:&#123;<span class="hljs-string">&quot;included&quot;</span><span class="hljs-symbol">:false</span><span class="hljs-punctuation">,</span><span class="hljs-string">&quot;journalName&quot;</span>:<span class="hljs-string">&quot;mysql-bin.000010&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-string">&quot;position&quot;</span>:<span class="hljs-number">984601</span><span class="hljs-punctuation">,</span><span class="hljs-string">&quot;serverId&quot;</span>:<span class="hljs-number">3232238851</span><span class="hljs-punctuation">,</span><span class="hljs-string">&quot;timestamp&quot;</span>:<span class="hljs-number">1676468225000</span>&#125;&#125;<br></code></pre></td></tr></table></figure><p>我连上对应的MySQL，查看binlog，好家伙，变成mysql-bin.000001了！！！我第一反应，这小子不会是重装MySQL了吧。一问，他说他昨天发现MySQL的binlog有重复的（没懂是什么意思），然后他执行了<code>reset master;</code></p><p>我。。。。</p><p>他又说他修改了Topic配置文件的<code>canal.instance.master.journal.name</code>和<code>canal.instance.master.position</code>配置项，把binlog和位点修改为现有的，但是重启Canal后没有生效。</p><p>这个问题在我刚接触Canal的时候也遇到过，修改配置文件中的binlog和位点，重启后发现Canal还在读以前的binlog和位点。这是因为Topic配置文件中的位点只是创建Topic时用于定位的，之后binlog的读取进度都记录在Zookeeper中，不再从配置文件中获取。所以Canal读取不到binlog的问题可以通过修改Zookeeper的Canal的信息来解决。</p><p>解决步骤如下：</p><p>先连接Zookeeper客户端</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">/usr/</span>local<span class="hljs-regexp">/zookeeper/</span>bin/zkCli.sh -server localhost:<span class="hljs-number">2181</span><br></code></pre></td></tr></table></figure><p>然后修改对应的canal信息</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-meta"># 查看现有canal位点信息</span><br>[<span class="hljs-meta">zk: localhost:2181(CONNECTED) 13</span>] <span class="hljs-keyword">get</span> /otter/canal/destinations/segi_pub/parse<br>&#123;<span class="hljs-string">&quot;identity&quot;</span>:&#123;<span class="hljs-string">&quot;slaveId&quot;</span>:<span class="hljs-number">-1</span>,<span class="hljs-string">&quot;sourceAddress&quot;</span>:&#123;<span class="hljs-string">&quot;address&quot;</span>:<span class="hljs-string">&quot;mid1&quot;</span>,<span class="hljs-string">&quot;port&quot;</span>:<span class="hljs-number">3306</span>&#125;&#125;,<span class="hljs-string">&quot;postion&quot;</span>:&#123;<span class="hljs-string">&quot;included&quot;</span>:<span class="hljs-literal">false</span>,<span class="hljs-string">&quot;journalName&quot;</span>:<span class="hljs-string">&quot;mysql-bin.000001&quot;</span>,<span class="hljs-string">&quot;position&quot;</span>:<span class="hljs-number">207621226</span>,<span class="hljs-string">&quot;serverId&quot;</span>:<span class="hljs-number">3232238851</span>,<span class="hljs-string">&quot;timestamp&quot;</span>:<span class="hljs-number">1676529084000</span>&#125;&#125;<br><br><span class="hljs-meta"># 修改</span><br>[<span class="hljs-meta">zk: localhost:2181(CONNECTED) 14</span>] <span class="hljs-keyword">set</span> /otter/canal/destinations/segi_pub/parse &#123;<span class="hljs-string">&quot;identity&quot;</span>:&#123;<span class="hljs-string">&quot;slaveId&quot;</span>:<span class="hljs-number">-1</span>,<span class="hljs-string">&quot;sourceAddress&quot;</span>:&#123;<span class="hljs-string">&quot;address&quot;</span>:<span class="hljs-string">&quot;mid1&quot;</span>,<span class="hljs-string">&quot;port&quot;</span>:<span class="hljs-number">3306</span>&#125;&#125;,<span class="hljs-string">&quot;postion&quot;</span>:&#123;<span class="hljs-string">&quot;included&quot;</span>:<span class="hljs-literal">false</span>,<span class="hljs-string">&quot;journalName&quot;</span>:<span class="hljs-string">&quot;mysql-bin.000001&quot;</span>,<span class="hljs-string">&quot;position&quot;</span>:<span class="hljs-number">207621</span>,<span class="hljs-string">&quot;serverId&quot;</span>:<span class="hljs-number">3232238851</span>,<span class="hljs-string">&quot;timestamp&quot;</span>:<span class="hljs-number">1676529084000</span>&#125;&#125;<br></code></pre></td></tr></table></figure><p>最后重启canal。</p>]]></content>
    
    
    <categories>
      
      <category>运维</category>
      
      <category>canal</category>
      
    </categories>
    
    
    <tags>
      
      <tag>运维</tag>
      
      <tag>canal</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>前端去除后端接口返回的datetime数据中的json</title>
    <link href="/2020/08/18/%E5%89%8D%E7%AB%AF%E5%8E%BB%E9%99%A4%E5%90%8E%E7%AB%AF%E6%8E%A5%E5%8F%A3%E8%BF%94%E5%9B%9E%E7%9A%84datetime%E6%95%B0%E6%8D%AE%E4%B8%AD%E7%9A%84json/"/>
    <url>/2020/08/18/%E5%89%8D%E7%AB%AF%E5%8E%BB%E9%99%A4%E5%90%8E%E7%AB%AF%E6%8E%A5%E5%8F%A3%E8%BF%94%E5%9B%9E%E7%9A%84datetime%E6%95%B0%E6%8D%AE%E4%B8%AD%E7%9A%84json/</url>
    
    <content type="html"><![CDATA[<p>在做项目的时候，遇到一个问题，明明在数据库中，DataTime类型的数据格式明明是正常的，怎么返回到前端后，就在日期和时间中多了一个T？<br>比如 <strong>2020-08-18T21:32:54</strong></p><p>查了下资料，好像是ISO规定的标准时间日期表示格式。在合并表示时间和日期时，在时间前面加一个大写字母T，如要表示东八区时间2004年5月3日下午5点30分8秒，可以写成<code>2004-05-03T17:30:08+8:00</code>或<code>20040503T173008+08</code></p><p>可以定义一个函数来对日期时间进行处理格式化</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-attr">methods</span>: &#123;<br>    <span class="hljs-comment">// 时间格式化</span><br>    <span class="hljs-title function_">dataFormat</span>(<span class="hljs-params">value</span>) &#123;<br>        <span class="hljs-keyword">var</span> year = value.<span class="hljs-title function_">substr</span>(<span class="hljs-number">0</span>, <span class="hljs-number">4</span>)<br>        <span class="hljs-keyword">var</span> month = value.<span class="hljs-title function_">substr</span>(<span class="hljs-number">5</span>, <span class="hljs-number">2</span>)<br>        <span class="hljs-keyword">var</span> day = value.<span class="hljs-title function_">substr</span>(<span class="hljs-number">8</span>, <span class="hljs-number">2</span>)<br>        <span class="hljs-keyword">var</span> hour = value.<span class="hljs-title function_">substr</span>(<span class="hljs-number">11</span>, <span class="hljs-number">2</span>)<br>        <span class="hljs-keyword">var</span> min = value.<span class="hljs-title function_">substr</span>(<span class="hljs-number">14</span>, <span class="hljs-number">2</span>)<br>        <span class="hljs-keyword">var</span> second = value.<span class="hljs-title function_">substr</span>(<span class="hljs-number">17</span>,<span class="hljs-number">2</span>)<br>        <span class="hljs-keyword">return</span> year + <span class="hljs-string">&quot;-&quot;</span> + month + <span class="hljs-string">&quot;-&quot;</span> + day + <span class="hljs-string">&quot; &quot;</span> + hour + <span class="hljs-string">&quot;:&quot;</span> + min + <span class="hljs-string">&quot;:&quot;</span>+second<br>      &#125;,<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>前端</category>
      
      <category>vue</category>
      
    </categories>
    
    
    <tags>
      
      <tag>前端</tag>
      
      <tag>vue</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>No module named &#39;pip._internal&#39;的解决方法</title>
    <link href="/2020/08/15/No-module-named-pip-internal-%E7%9A%84%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95/"/>
    <url>/2020/08/15/No-module-named-pip-internal-%E7%9A%84%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<p>在使用pip安装三方模块时遇到如下错误：</p><figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs nix">Traceback (most recent call last):<br>  File <span class="hljs-string">&quot;c:<span class="hljs-char escape_">\p</span>rogram files<span class="hljs-char escape_">\p</span>ython37<span class="hljs-char escape_">\l</span>ib<span class="hljs-char escape_">\r</span>unpy.py&quot;</span>, line <span class="hljs-number">193</span>, <span class="hljs-keyword">in</span> _run_module_as_main<br>    <span class="hljs-string">&quot;__main__&quot;</span>, mod_spec)<br>  File <span class="hljs-string">&quot;c:<span class="hljs-char escape_">\p</span>rogram files<span class="hljs-char escape_">\p</span>ython37<span class="hljs-char escape_">\l</span>ib<span class="hljs-char escape_">\r</span>unpy.py&quot;</span>, line85, <span class="hljs-keyword">in</span> _run_code<br>    exec(code, run_globals)<br>  File <span class="hljs-string">&quot;C:<span class="hljs-char escape_">\P</span>rogram Files<span class="hljs-char escape_">\P</span>ython37<span class="hljs-char escape_">\S</span>cripts<span class="hljs-char escape_">\p</span>ip.exe<span class="hljs-char escape_">\_</span>_main__.py&quot;</span>, line <span class="hljs-number">5</span>, <span class="hljs-keyword">in</span> <span class="hljs-symbol">&lt;module&gt;</span><br><span class="hljs-params">ModuleNotFoundError:</span> No module named &#x27;pip._internal&#x27;<br></code></pre></td></tr></table></figure><p>看错误信息是没有找到<code>pip._internal</code>这个模块。</p><p>通过重装pip解决。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">curl https://bootstrap.pypa.io/get-pip.py -o get-pip.py<br>python get-pip.py --force-reinstall<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>git错误-Your local changes to the following files would be overwritten by merge</title>
    <link href="/2020/04/03/git%E9%94%99%E8%AF%AF-Your-local-changes-to-the-following-files-would-be-overwritten-by-merge/"/>
    <url>/2020/04/03/git%E9%94%99%E8%AF%AF-Your-local-changes-to-the-following-files-would-be-overwritten-by-merge/</url>
    
    <content type="html"><![CDATA[<p>git pull拉取远程仓库时出现错误</p><blockquote><p>error: Your local changes to the following files would be overwritten by merge:<br>合并将覆盖对以下文件的本地更改</p></blockquote><p>如果想保留本地修改，可以通过以下方法解决</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">git stash<br>git pull origin <span class="hljs-keyword">master</span><br><span class="hljs-title">git</span> stash pop<br></code></pre></td></tr></table></figure><p><code>git stash</code>备份当前工作区的内容，保存到git 栈中，从最近的一次commit中读取相关内容。然后就可以git pull了。<br><code>git stash pop</code>从git栈中获取到最近一次stash进去的内容，恢复工作区的内容，获取之后，会删除栈中对应的stash。</p><p>如果不想保留本地修改，使用如下命令：</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">git <span class="hljs-keyword">reset</span> <span class="hljs-comment">--hard</span><br></code></pre></td></tr></table></figure><p><code>git reset --hard</code>放弃本地修改，然后可以使用git pull覆盖掉本地的代码。</p>]]></content>
    
    
    <categories>
      
      <category>git</category>
      
    </categories>
    
    
    <tags>
      
      <tag>git</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Python中的a+=b和a=a+b之间的区别</title>
    <link href="/2020/03/26/Python%E4%B8%AD%E7%9A%84a-b%E5%92%8Ca-a-b%E4%B9%8B%E9%97%B4%E7%9A%84%E5%8C%BA%E5%88%AB/"/>
    <url>/2020/03/26/Python%E4%B8%AD%E7%9A%84a-b%E5%92%8Ca-a-b%E4%B9%8B%E9%97%B4%E7%9A%84%E5%8C%BA%E5%88%AB/</url>
    
    <content type="html"><![CDATA[<p>当变量为不可变对象时，<code>a+=b</code>和<code>a=a+b</code>是一样的，但前后两个a已经不是同一个对象</p><p>当变量是可变对象时，虽然<code>a+=b</code>和<code>a=a+b</code>的效果是一样的，但是<code>a=a+b</code>前后的两个a也不是同一个对象了，而<code>a+=b</code>前后两个a还是同一个对象</p><p>看如下实例：</p><p>当a和b为不可变对象</p><figure class="highlight python-repl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs python-repl"># 不可变对象<br># a+=b 前后的a不是同一个对象<br><span class="hljs-meta prompt_">&gt;&gt;&gt;</span> <span class="language-python">a=<span class="hljs-number">1</span></span><br><span class="hljs-meta prompt_">&gt;&gt;&gt;</span> <span class="language-python">b=<span class="hljs-number">2</span></span><br><span class="hljs-meta prompt_">&gt;&gt;&gt;</span> <span class="language-python"><span class="hljs-built_in">id</span>(a)</span><br>140722530604704<br><span class="hljs-meta prompt_">&gt;&gt;&gt;</span> <span class="language-python">a+=b</span><br><span class="hljs-meta prompt_">&gt;&gt;&gt;</span> <span class="language-python"><span class="hljs-built_in">id</span>(a)</span><br>140722530604768<br><span class="hljs-meta prompt_">&gt;&gt;&gt;</span> <span class="language-python"><span class="hljs-built_in">print</span>(a)</span><br>3<br># a=a+b 前后的a也不是同一个对象<br><span class="hljs-meta prompt_">&gt;&gt;&gt;</span> <span class="language-python">a=<span class="hljs-number">1</span></span><br><span class="hljs-meta prompt_">&gt;&gt;&gt;</span> <span class="language-python">b=<span class="hljs-number">2</span></span><br><span class="hljs-meta prompt_">&gt;&gt;&gt;</span> <span class="language-python"><span class="hljs-built_in">id</span>(a)</span><br>140722530604704<br><span class="hljs-meta prompt_">&gt;&gt;&gt;</span> <span class="language-python">a=a+b</span><br><span class="hljs-meta prompt_">&gt;&gt;&gt;</span> <span class="language-python"><span class="hljs-built_in">id</span>(a)</span><br>140722530604768<br><span class="hljs-meta prompt_">&gt;&gt;&gt;</span> <span class="language-python"><span class="hljs-built_in">print</span>(a)</span><br>3<br></code></pre></td></tr></table></figure><p>当a和b为可变对象</p><figure class="highlight python-repl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs python-repl"># 可变对象<br># a+=b 前后的a是同一个对象<br><span class="hljs-meta prompt_">&gt;&gt;&gt;</span> <span class="language-python">a=[<span class="hljs-number">1</span>,<span class="hljs-number">2</span>]</span><br><span class="hljs-meta prompt_">&gt;&gt;&gt;</span> <span class="language-python">b=[<span class="hljs-number">3</span>,<span class="hljs-number">4</span>]</span><br><span class="hljs-meta prompt_">&gt;&gt;&gt;</span> <span class="language-python"><span class="hljs-built_in">id</span>(a)</span><br>214391266944<br><span class="hljs-meta prompt_">&gt;&gt;&gt;</span> <span class="language-python">a+=b</span><br><span class="hljs-meta prompt_">&gt;&gt;&gt;</span> <span class="language-python"><span class="hljs-built_in">id</span>(a)</span><br>214391266944<br><span class="hljs-meta prompt_">&gt;&gt;&gt;</span> <span class="language-python"><span class="hljs-built_in">print</span>(a)</span><br>[1, 2, 3, 4]<br># a=a+b 前后的a不是同一个对象<br><span class="hljs-meta prompt_">&gt;&gt;&gt;</span> <span class="language-python">a=[<span class="hljs-number">1</span>,<span class="hljs-number">2</span>]</span><br><span class="hljs-meta prompt_">&gt;&gt;&gt;</span> <span class="language-python">b=[<span class="hljs-number">3</span>,<span class="hljs-number">4</span>]</span><br><span class="hljs-meta prompt_">&gt;&gt;&gt;</span> <span class="language-python"><span class="hljs-built_in">id</span>(a)</span><br>2143494790272<br><span class="hljs-meta prompt_">&gt;&gt;&gt;</span> <span class="language-python">a=a+b</span><br><span class="hljs-meta prompt_">&gt;&gt;&gt;</span> <span class="language-python"><span class="hljs-built_in">id</span>(a)</span><br>2143494790592<br><span class="hljs-meta prompt_">&gt;&gt;&gt;</span> <span class="language-python"><span class="hljs-built_in">print</span>(a)</span><br>[1, 2, 3, 4]<br></code></pre></td></tr></table></figure><p>区别在于，<code>+</code>操作会调用<code>__add__()</code>方法，该方法返回一个新的对象，原对象不修改。而<code>+=</code>调用的是<code>__iadd__()</code>方法，该方法直接在原对象上进行更新，该方法返回值为<code>None</code>。如果对象没有<code>__iadd__()</code>方法时，会尝试调用<code>__add__()</code>方法。</p><p>不可变对象没有<code>__iadd__()</code>方法，可变对象同时具有<code>__add__()</code>和<code>__iadd__()</code>方法。</p><figure class="highlight python-repl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs python-repl"><span class="hljs-meta prompt_">&gt;&gt;&gt;</span> <span class="language-python">a = <span class="hljs-number">1</span></span><br><span class="hljs-meta prompt_">&gt;&gt;&gt;</span> <span class="language-python">b = []</span><br><span class="hljs-meta prompt_">&gt;&gt;&gt;</span><br><span class="hljs-meta prompt_">&gt;&gt;&gt;</span> <span class="language-python"><span class="hljs-keyword">if</span> <span class="hljs-built_in">hasattr</span>(a, <span class="hljs-string">&#x27;__add__&#x27;</span>):</span><br><span class="hljs-meta prompt_">...</span> <span class="language-python">        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;a has __add__&#x27;</span>)</span><br><span class="hljs-meta prompt_">...</span><br>a has __add__<br><span class="hljs-meta prompt_">&gt;&gt;&gt;</span> <span class="language-python"><span class="hljs-keyword">if</span> <span class="hljs-built_in">hasattr</span>(b, <span class="hljs-string">&#x27;__add__&#x27;</span>):</span><br><span class="hljs-meta prompt_">...</span> <span class="language-python">            <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;b has __add__&#x27;</span>)</span><br><span class="hljs-meta prompt_">...</span><br>b has __add__<br><span class="hljs-meta prompt_">&gt;&gt;&gt;</span> <span class="language-python"><span class="hljs-keyword">if</span> <span class="hljs-built_in">hasattr</span>(a, <span class="hljs-string">&#x27;__iadd__&#x27;</span>):</span><br><span class="hljs-meta prompt_">...</span> <span class="language-python">                <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;a has __iadd__&#x27;</span>)</span><br><span class="hljs-meta prompt_">...</span><br><span class="hljs-meta prompt_">&gt;&gt;&gt;</span> <span class="language-python"><span class="hljs-keyword">if</span> <span class="hljs-built_in">hasattr</span>(b, <span class="hljs-string">&#x27;__iadd__&#x27;</span>):</span><br><span class="hljs-meta prompt_">...</span> <span class="language-python">                    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;b has __iadd__&#x27;</span>)</span><br><span class="hljs-meta prompt_">...</span><br>b has __iadd__<br></code></pre></td></tr></table></figure><p><strong>结论</strong>：</p><ul><li>当变量是不可变对象时，<code>a+=b</code>和<code>a=a+b</code>调用的都是<code>__add__</code>方法，返回的是一个新对象</li><li>当变量是可变对象时，<code>a+=b</code>调用的是<code>__iadd__</code>方法，直接在原对象上进行更新；<code>a=a+b</code>调用的是<code>__add__</code>方法，返回一个新对象</li></ul>]]></content>
    
    
    <categories>
      
      <category>Python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Docker学习笔记</title>
    <link href="/2020/03/15/Docker%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <url>/2020/03/15/Docker%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<h2 id="Docker学习笔记"><a href="#Docker学习笔记" class="headerlink" title="Docker学习笔记"></a>Docker学习笔记</h2><h3 id="一、简介"><a href="#一、简介" class="headerlink" title="一、简介"></a>一、简介</h3><p>Docker是一种<u>开源</u>平台，用于自动化应用程序的部署、扩展和管理。它<u>使用容器化技术</u>，允许开发人员<u>将应用程序及其所有依赖项打包到一个称为容器的可移植单元</u>中。这个容器包含应用程序的代码、运行时、系统工具、系统库等，<u>确保应用程序能够在不同的环境中以一致的方式运行。</u></p><p><strong>总结：Docker是一款开源的容器管理工具，用于创建、管理和编排容器</strong></p><p><strong>Docker的主要组件：</strong></p><ul><li><strong>Docker引擎</strong>：Docker的核心组件，负责创建和管理容器。包括一个守护进程、一个REST API，以及与Docker交互的命令行</li><li><strong>Docker镜像</strong>：镜像是一个独立的、可执行的软件包，包含运行应用所需的所有内容</li><li><strong>Docker容器</strong>：容器是镜像的实例</li></ul><p><strong>Docker的优势：</strong></p><ul><li>便携性：容器可以在任何支持Docker的环境中运行，不用担心依赖关系和环境变化</li><li>隔离性：每个容器相关隔离，不受其他容器影响，提高了安全性和可靠性</li><li>资源利用效率：相比传统虚拟机，所需系统资源更少</li><li>快速部署：容器可以快速启停，提高了应用部署的效率</li></ul><p><strong>Docker与虚拟机的差异</strong></p><table><thead><tr><th>Docker</th><th>虚拟机</th></tr></thead><tbody><tr><td>进程级</td><td>操作系统级</td></tr><tr><td>容器共享宿主机内核</td><td>自己包含一个完整的操作系统</td></tr><tr><td>轻量，资源占用低</td><td>资源占用高</td></tr><tr><td>启动快，秒级</td><td>启动慢，分钟级</td></tr><tr><td>易建立和销毁</td><td>不易建立和销毁</td></tr><tr><td>容器之间是进程级别的隔离</td><td>虚拟机之间是操作系统级别的隔离（更安全，但资源开销更大）</td></tr><tr><td>集群规模大</td><td>集群规模小</td></tr><tr><td>一个容器只能运行一个应用</td><td>一台虚拟机可以运行多个应用</td></tr></tbody></table><p>Docker在应用程序和宿主机之间引入一层抽象</p><p>虚拟机在物理机上再虚拟一个完整的操作系统，然后再安装应用</p><p><img src="https://pic1.imgdb.cn/item/67d56d9188c538a9b5becb71.png"></p><p><img src="https://pic1.imgdb.cn/item/67d56dd588c538a9b5becb7c.png"></p><h2 id="二、Docker的安装"><a href="#二、Docker的安装" class="headerlink" title="二、Docker的安装"></a>二、Docker的安装</h2><blockquote><p>以CentOS7为例</p></blockquote><h3 id="1-卸载旧版本"><a href="#1-卸载旧版本" class="headerlink" title="1. 卸载旧版本"></a>1. 卸载旧版本</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash"><span class="hljs-built_in">sudo</span> yum remove docker \</span><br><span class="language-bash">docker-client \</span><br><span class="language-bash">docker-client-latest \</span><br><span class="language-bash">docker-common \</span><br><span class="language-bash">docker-latest \</span><br><span class="language-bash">docker-latest-logrotate \</span><br><span class="language-bash">docker-logrotate \</span><br><span class="language-bash">            docker-engine</span><br></code></pre></td></tr></table></figure><h3 id="2-安装"><a href="#2-安装" class="headerlink" title="2. 安装"></a>2. 安装</h3><h4 id="2-1-官方yum源安装"><a href="#2-1-官方yum源安装" class="headerlink" title="2.1 官方yum源安装"></a>2.1 官方yum源安装</h4><p>安装</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">安装yum-utils 管理repository及扩展包的工具</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash"><span class="hljs-built_in">sudo</span> yum install -y yum-utils</span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">下载官方repo文件</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash"><span class="hljs-built_in">sudo</span> yum-config-manager \</span><br><span class="language-bash">    --add-repo \</span><br><span class="language-bash">    https://download.docker.com/linux/centos/docker-ce.repo</span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">安装docker引擎</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash"><span class="hljs-built_in">sudo</span> yum install docker-ce docker-ce-cli containerd.io -y</span><br></code></pre></td></tr></table></figure><p>卸载：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">卸载Docker Engine，CLI和Containerd软件包</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash"><span class="hljs-built_in">sudo</span> yum remove docker-ce docker-ce-cli containerd.io</span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">删除所有镜像，容器和卷</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash"><span class="hljs-built_in">sudo</span> <span class="hljs-built_in">rm</span> -rf /var/lib/docker</span><br></code></pre></td></tr></table></figure><h4 id="2-2-rpm包安装"><a href="#2-2-rpm包安装" class="headerlink" title="2.2 rpm包安装"></a>2.2 rpm包安装</h4><p>转到<a href="https://download.docker.com/linux/rhel/">https://download.docker.com/linux/rhel/</a> 并选择您的 RHEL 版本。然后浏览<code>x86_64/stable/Packages/</code>并下载<code>.rpm</code>要安装的 Docker 版本的文件。</p><p>需要下载三种rpm包：</p><ol><li><code>docker-ce-xxx.rpm</code>  Docker Engine</li><li><code>containerd.io-xxx.rpm</code>  Containerd</li><li><code>docker-ce-cli-xxx.rpm</code>  CLI</li></ol><blockquote><p>如果安装时报还缺什么依赖，在同页面找到对应的包链接下载即可</p></blockquote><p>验证是否安装成功</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash"><span class="hljs-built_in">sudo</span> docker version</span><br></code></pre></td></tr></table></figure><h4 id="2-3-Docker进程管理命令"><a href="#2-3-Docker进程管理命令" class="headerlink" title="2.3 Docker进程管理命令"></a>2.3 Docker进程管理命令</h4><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs livecodeserver">systemctl <span class="hljs-built_in">start</span> docker<span class="hljs-comment">// 启动Docker</span><br>systemctl <span class="hljs-built_in">stop</span> docker<span class="hljs-comment">// 停止Docker进程</span><br>systemctl restart docker<span class="hljs-comment">// 重启Docker</span><br>systemctl status docker<span class="hljs-comment">// 查看Docker进程状态</span><br></code></pre></td></tr></table></figure><h3 id="3-Docker配置"><a href="#3-Docker配置" class="headerlink" title="3. Docker配置"></a>3. Docker配置</h3><h4 id="3-1-daemon-json"><a href="#3-1-daemon-json" class="headerlink" title="3.1 daemon.json"></a>3.1 daemon.json</h4><p>daemon.json用于配置 Docker 守护进程在该文件中，可以配置一系列选项，包括但不限于：</p><ol><li><strong>存储驱动（storage driver）：</strong> 指定 Docker 容器和镜像的存储后端。</li><li><strong>镜像存储位置：</strong> 指定 Docker 镜像的存储路径。</li><li><strong>日志配置：</strong> 配置 Docker 守护进程的日志输出设置，如日志级别和日志驱动。</li><li><strong>网络配置：</strong> 配置 Docker 的网络设置，包括默认的网络驱动等。</li><li><strong>安全选项：</strong> 配置 Docker 的安全设置，如使用 TLS 加密等。</li><li><strong>HTTP&#x2F;HTTPS代理设置：</strong> 配置 Docker 守护进程是否通过 HTTP 或 HTTPS 代理进行通信。</li><li><strong>内存和 CPU 限制：</strong> 配置 Docker 容器可用的内存和 CPU 资源。</li></ol><blockquote><p>该文件默认位置是&#x2F;etc&#x2F;docker&#x2F;daemon.json，如果不存在，可以手动创建它</p></blockquote><p>示例：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;log-driver&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;json-file&quot;</span><span class="hljs-punctuation">,</span>          <span class="hljs-comment">// 指定日志驱动程序</span><br>  <span class="hljs-attr">&quot;log-opts&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;max-size&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;10m&quot;</span><span class="hljs-punctuation">,</span>                 <span class="hljs-comment">// 配置日志文件的最大大小</span><br>    <span class="hljs-attr">&quot;max-file&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;3&quot;</span>                    <span class="hljs-comment">// 配置日志文件的最大数量</span><br>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;storage-driver&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;overlay2&quot;</span><span class="hljs-punctuation">,</span>       <span class="hljs-comment">// 指定存储驱动程序</span><br>  <span class="hljs-attr">&quot;data-root&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;/mnt/docker&quot;</span><span class="hljs-punctuation">,</span>         <span class="hljs-comment">// 指定 Docker 数据的根目录</span><br>  <span class="hljs-attr">&quot;default-ulimits&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;nofile&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span> <span class="hljs-attr">&quot;Name&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;nofile&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-attr">&quot;Soft&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">1024</span><span class="hljs-punctuation">,</span> <span class="hljs-attr">&quot;Hard&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">2048</span> <span class="hljs-punctuation">&#125;</span> <span class="hljs-comment">// 配置默认的 ulimit 限制</span><br>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;userland-proxy&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">false</span></span><span class="hljs-punctuation">,</span>            <span class="hljs-comment">// 禁用用户空间代理</span><br>  <span class="hljs-attr">&quot;exec-opts&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><span class="hljs-string">&quot;native.cgroupdriver=systemd&quot;</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span> <span class="hljs-comment">// 配置 exec 驱动程序选项</span><br>  <span class="hljs-attr">&quot;insecure-registries&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><span class="hljs-string">&quot;my.insecure.registry.com&quot;</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span> <span class="hljs-comment">// 配置信任的镜像仓库</span><br>  <span class="hljs-attr">&quot;debug&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span>                       <span class="hljs-comment">// 启用调试模式</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><blockquote><p>修改该文件后重启Docker生效</p></blockquote><h4 id="3-2-key-json"><a href="#3-2-key-json" class="headerlink" title="3.2 key.json"></a>3.2 key.json</h4><p><code>key.json</code> 文件通常与 Docker Swarm 相关，包含有关 Swarm 模式的加密和身份验证密钥的信息，在启动时由docker引擎自动生成。</p><blockquote><p>Docker Swarm 是 Docker 提供的用于容器编排和集群管理的工具。Swarm 允许你在多个 Docker 主机上运行和管理容器，以提高应用程序的可用性和伸缩性。</p></blockquote><h2 id="三、镜像"><a href="#三、镜像" class="headerlink" title="三、镜像"></a>三、镜像</h2><h3 id="1-镜像的概念"><a href="#1-镜像的概念" class="headerlink" title="1. 镜像的概念"></a>1. 镜像的概念</h3><p>在 Docker 中，镜像（Image）是一个轻量、独立、可执行的软件包，<u>包含运行应用程序所需的所有内容，包括代码、运行时、库、环境变量和配置文件</u>。Docker 镜像是一个静态的文件，它包括了启动容器所需的所有信息。</p><p><u>镜像是只读的，不包含动态数据，构建后永远不变的。</u></p><p><strong>镜像的重要概念：层次结构</strong></p><p><img src="https://pic1.imgdb.cn/item/67d56f3788c538a9b5becbae.webp"></p><p>Docker 镜像的层次结构是指镜像由多个层次组成的设计方式。每个层次都包含了文件系统的一部分或一组更改，而这些层次按照一定的顺序组合在一起，形成最终的镜像。</p><p>每个Docker就像都需要一个基础镜像（最底层），这个镜像值包括最基本的命令、工具和程序库，很多镜像的基础镜像都是一个干净的Linux系统。从下往上每一层镜像都是下一层镜像的父镜像。</p><p>镜像的每一层都是一个只读层。</p><p>当容器启动时，一个新的可写层被加载到镜像的顶部。 这一层通常被称作“容器层”，“容器层”之下的都叫“镜像层”。所有操作都是针对容器层的，只有容器层是可写的，容器层下面的所有镜像层都是只读的。</p><p><img src="https://pic1.imgdb.cn/item/67d56f8988c538a9b5becbb5.png"></p><h3 id="2-Dockerfile"><a href="#2-Dockerfile" class="headerlink" title="2. Dockerfile"></a>2. Dockerfile</h3><h4 id="2-1-指令"><a href="#2-1-指令" class="headerlink" title="2.1 指令"></a>2.1 指令</h4><p>Dockerfile 是一个文本文件，包含了一系列用于构建 Docker 镜像的指令和配置。通过编写 Dockerfile，你可以定义一个自包含的、可重复构建的 Docker 镜像。Docker 使用 Dockerfile 来自动化构建过程，确保镜像的一致性和可复制性。</p><p>Dockerfile支持<code>#</code>开头的注释行。</p><blockquote><p>Dockerfile中，每一条指令都会创建一个镜像层，继而会增加整体镜像的大小</p></blockquote><p><strong>Dockerfile指令</strong></p><p><code>FROM</code>指定基础镜像，必须是第一条指令</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs vim">格式：<br>　　FROM <span class="hljs-symbol">&lt;image&gt;</span><br>　　FROM <span class="hljs-symbol">&lt;image&gt;</span>:<span class="hljs-symbol">&lt;tag&gt;</span><br>　　FROM <span class="hljs-symbol">&lt;image&gt;</span>@<span class="hljs-symbol">&lt;digest&gt;</span><br>示例：<br>　　FROM mysq<span class="hljs-variable">l:5</span>.<span class="hljs-number">6</span><br>注：<br>　　<span class="hljs-keyword">tag</span>或digest是可选的，如果不使用这两个值时，会使用latest版本的基础镜像<br></code></pre></td></tr></table></figure><p><code>MAINTAINER</code>  维护者信息 </p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs dockerfile">格式：<br>    <span class="hljs-keyword">MAINTAINER</span> &lt;name&gt;<br>示例：<br>    <span class="hljs-keyword">MAINTAINER</span> Jasper Xu<br>    <span class="hljs-keyword">MAINTAINER</span> sorex@<span class="hljs-number">163</span>.com<br>    <span class="hljs-keyword">MAINTAINER</span> Jasper Xu &lt;sorex@<span class="hljs-number">163</span>.com&gt;<br></code></pre></td></tr></table></figure><p><code>ADD</code>  将文件添加到镜像中 </p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs routeros">格式：<br>    <span class="hljs-built_in">ADD</span> &lt;src&gt;<span class="hljs-built_in">..</span>. &lt;dest&gt;<br>    <span class="hljs-built_in">ADD</span> [<span class="hljs-string">&quot;&lt;src&gt;&quot;</span>,<span class="hljs-built_in">..</span>. <span class="hljs-string">&quot;&lt;dest&gt;&quot;</span>] 用于支持包含空格的路径<br>示例：<br>    <span class="hljs-built_in">ADD</span> hom* /mydir/          # 添加所有以<span class="hljs-string">&quot;hom&quot;</span>开头的文件<br>    <span class="hljs-built_in">ADD</span> hom?.txt /mydir/      # ? 替代一个单字符,例如：<span class="hljs-string">&quot;home.txt&quot;</span><br>    <span class="hljs-built_in">ADD</span> test relativeDir/     # 添加 <span class="hljs-string">&quot;test&quot;</span> 到 `WORKDIR`/relativeDir/<br>    <span class="hljs-built_in">ADD</span> test /absoluteDir/    # 添加 <span class="hljs-string">&quot;test&quot;</span> 到 /absoluteDir/<br></code></pre></td></tr></table></figure><p><code>COPY</code>  将本地文件添加到镜像中，类似于ADD </p><p><code>CMD</code>  容器启动时执行的命令 </p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs dockerfile">格式：<br>    <span class="hljs-keyword">CMD</span><span class="language-bash"> [<span class="hljs-string">&quot;executable&quot;</span>,<span class="hljs-string">&quot;param1&quot;</span>,<span class="hljs-string">&quot;param2&quot;</span>] (执行可执行文件，优先)</span><br>    <span class="hljs-keyword">CMD</span><span class="language-bash"> [<span class="hljs-string">&quot;param1&quot;</span>,<span class="hljs-string">&quot;param2&quot;</span>] (设置了ENTRYPOINT，则直接调用ENTRYPOINT添加参数)</span><br>    <span class="hljs-keyword">CMD</span><span class="language-bash"> <span class="hljs-built_in">command</span> param1 param2 (执行shell内部命令)</span><br>示例：<br>    <span class="hljs-keyword">CMD</span><span class="language-bash"> <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;This is a test.&quot;</span> | <span class="hljs-built_in">wc</span> -</span><br>    <span class="hljs-keyword">CMD</span><span class="language-bash"> [<span class="hljs-string">&quot;/usr/bin/wc&quot;</span>,<span class="hljs-string">&quot;--help&quot;</span>]</span><br>注：<br><span class="hljs-keyword">CMD</span><span class="language-bash">不同于RUN，CMD用于指定在容器启动时所要执行的命令，而RUN用于指定镜像构建时所要执行的命令。</span><br></code></pre></td></tr></table></figure><p><code>ENTRYPOINT</code>  配置容器，使其可执行化。配合CMD可省去”application”，只使用参数 </p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs dockerfile">格式：<br>    <span class="hljs-keyword">ENTRYPOINT</span><span class="language-bash"> [<span class="hljs-string">&quot;executable&quot;</span>, <span class="hljs-string">&quot;param1&quot;</span>, <span class="hljs-string">&quot;param2&quot;</span>] (可执行文件, 优先)</span><br>    <span class="hljs-keyword">ENTRYPOINT</span><span class="language-bash"> <span class="hljs-built_in">command</span> param1 param2 (shell内部命令)</span><br>示例：<br>    <span class="hljs-keyword">FROM</span> ubuntu<br>    <span class="hljs-keyword">ENTRYPOINT</span><span class="language-bash"> [<span class="hljs-string">&quot;top&quot;</span>, <span class="hljs-string">&quot;-b&quot;</span>]</span><br>    <span class="hljs-keyword">CMD</span><span class="language-bash"> [<span class="hljs-string">&quot;-c&quot;</span>]</span><br>注：　　　<span class="hljs-keyword">ENTRYPOINT</span><span class="language-bash">与CMD非常类似，不同的是通过docker run执行的命令不会覆盖ENTRYPOINT，而docker run命令中指定的任何参数，都会被当做参数再次传递给ENTRYPOINT。Dockerfile中只允许有一个ENTRYPOINT命令，多指定时会覆盖前面的设置，而只执行最后的ENTRYPOINT指令。</span><br></code></pre></td></tr></table></figure><p><code>LABEL</code>  为镜像添加元数据 </p><figure class="highlight sas"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sas">格式：<br>    <span class="hljs-keyword">LABEL</span> &lt;<span class="hljs-keyword">key</span>&gt;=&lt;value&gt; &lt;<span class="hljs-keyword">key</span>&gt;=&lt;value&gt; &lt;<span class="hljs-keyword">key</span>&gt;=&lt;value&gt; ...<br>示例：<br>　　<span class="hljs-keyword">LABEL</span> version=<span class="hljs-string">&quot;1.0&quot;</span> description=<span class="hljs-string">&quot;这是一个Web服务器&quot;</span> <span class="hljs-keyword">by</span>=<span class="hljs-string">&quot;IT笔录&quot;</span><br>注：<br>　　使用<span class="hljs-keyword">LABEL</span>指定元数据时，一条<span class="hljs-keyword">LABEL</span>指定可以指定一或多条元数据，指定多条元数据时不同元数据之间通过空格分隔。推荐将所有的元数据通过一条<span class="hljs-keyword">LABEL</span>指令指定，以免生成过多的中间镜像。<br></code></pre></td></tr></table></figure><p><code>ENV</code>  设置环境变量 </p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs xml">格式：<br>    ENV <span class="hljs-tag">&lt;<span class="hljs-name">key</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>  #<span class="hljs-tag">&lt;<span class="hljs-name">key</span>&gt;</span>之后的所有内容均会被视为其<span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>的组成部分，因此，一次只能设置一个变量<br>    ENV <span class="hljs-tag">&lt;<span class="hljs-name">key</span>&gt;</span>=<span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span> ...  #可以设置多个变量，每个变量为一个&quot;<span class="hljs-tag">&lt;<span class="hljs-name">key</span>&gt;</span>=<span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>&quot;的键值对，如果<span class="hljs-tag">&lt;<span class="hljs-name">key</span>&gt;</span>中包含空格，可以使用\来进行转义，也可以通过&quot;&quot;来进行标示；另外，反斜线也可以用于续行<br>示例：<br>    ENV myName John Doe<br>    ENV myDog Rex The Dog<br>    ENV myCat=fluffy<br></code></pre></td></tr></table></figure><p><code>EXPOSE</code>  暴露与外界交互的端口 </p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs dockerfile">格式：<br>    <span class="hljs-keyword">EXPOSE</span> &lt;port&gt; [&lt;port&gt;...]<br>示例：<br>    <span class="hljs-keyword">EXPOSE</span> <span class="hljs-number">80</span> <span class="hljs-number">443</span><br>    <span class="hljs-keyword">EXPOSE</span> <span class="hljs-number">8080</span>    <br>    <span class="hljs-keyword">EXPOSE</span> <span class="hljs-number">11211</span>/tcp <span class="hljs-number">11211</span>/udp<br>注：<br><span class="hljs-keyword">EXPOSE</span>并不会让容器的端口访问到主机。要使其可访问，需要在docker <span class="hljs-keyword">run</span><span class="language-bash">运行容器时通过-p来发布这些端口，或通过-P参数来发布EXPOSE导出的所有端口</span><br></code></pre></td></tr></table></figure><p><code>VOLUME</code>  用于指定持久化目录（VOLUME将容器中的目录映射到宿主机的目录 ）</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs dockerfile">格式：<br>    <span class="hljs-keyword">VOLUME</span><span class="language-bash"> [<span class="hljs-string">&quot;/path/to/dir&quot;</span>]</span><br>示例：<br>    <span class="hljs-keyword">VOLUME</span><span class="language-bash"> [<span class="hljs-string">&quot;/data&quot;</span>]</span><br>    <span class="hljs-keyword">VOLUME</span><span class="language-bash"> [<span class="hljs-string">&quot;/var/www&quot;</span>, <span class="hljs-string">&quot;/var/log/apache2&quot;</span>, <span class="hljs-string">&quot;/etc/apache2&quot;</span>注：　　一个卷可以存在于一个或多个容器的指定目录，该目录可以绕过联合文件系统，并具有以下功能：</span><br></code></pre></td></tr></table></figure><blockquote><p>1 卷可以容器间共享和重用<br>2 容器并不一定要和其它容器共享卷<br>3 修改卷后会立即生效<br>4 对卷的修改不会对镜像产生影响<br>5 卷会一直存在，直到没有任何容器在使用它</p></blockquote><p><code>WORKDIR</code>  指定工作目录，构建容器时的操作在此目录下进行</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs css">格式：<br>    WORKDIR /<span class="hljs-selector-tag">path</span>/<span class="hljs-selector-tag">to</span>/workdir<br>示例：<br>    WORKDIR /<span class="hljs-selector-tag">a</span>  (这时工作目录为/<span class="hljs-selector-tag">a</span>)<br>    WORKDIR <span class="hljs-selector-tag">b</span>  (这时工作目录为/<span class="hljs-selector-tag">a</span>/<span class="hljs-selector-tag">b</span>)<br>    WORKDIR c  (这时工作目录为/<span class="hljs-selector-tag">a</span>/<span class="hljs-selector-tag">b</span>/c)注：　　通过WORKDIR设置工作目录后，Dockerfile中其后的命令RUN、CMD、ENTRYPOINT、ADD、COPY等命令都会在该目录下执行。在使用docker run运行容器时，可以通过-w参数覆盖构建时所设置的工作目录。<br></code></pre></td></tr></table></figure><blockquote><p>CMD参数指定的命令会在此目录下执行 </p></blockquote><p><code>USER</code>  用于指定运行容器时的用户名或UID </p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">格式:<br><span class="hljs-keyword">USER</span> <span class="hljs-title">user</span><br>    <span class="hljs-keyword">USER</span> <span class="hljs-title">user</span>:<span class="hljs-keyword">group</span><br>    <span class="hljs-title">USER</span> uid<br>    <span class="hljs-keyword">USER</span> <span class="hljs-title">uid</span>:gid<br>    <span class="hljs-keyword">USER</span> <span class="hljs-title">user</span>:gid<br>    <span class="hljs-keyword">USER</span> <span class="hljs-title">uid</span>:<span class="hljs-keyword">group</span><br><span class="hljs-title">示例：</span><br><span class="hljs-title">USER</span> www<br>注：<br>　　使用USER指定用户后，Dockerfile中其后的命令RUN、CMD、ENTRYPOINT都将使用该用户。镜像构建完成后，通过docker run运行容器时，可以通过-u参数来覆盖所指定的用户。<br></code></pre></td></tr></table></figure><blockquote><p><strong><code>CMD</code>、<code>RUN</code>和<code>ENTRYPOINT</code>的区别</strong></p><p>CMD在容器启动时执行，可以定义多个，但只有最后一个会生效</p><p>RUN在镜像构建过程中执行</p><p>ENTRYPOINT在容器启动时执行</p><p>CMD 指令指定的程序可被 docker run 命令行参数中指定要运行的程序所覆盖。而其不会被 docker run 的命令行参数指定的指令所覆盖，而且这些命令行参数会被当作参数送给 ENTRYPOINT 指令指定的程序</p><p>如以下Dockerfile：</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs dockerfile"><span class="hljs-keyword">FROM</span> ubuntu<br><span class="hljs-keyword">ENTRYPOINT</span><span class="language-bash"> [<span class="hljs-string">&quot;echo&quot;</span>, <span class="hljs-string">&quot;Hello&quot;</span>]</span><br><span class="hljs-keyword">CMD</span><span class="language-bash"> [<span class="hljs-string">&quot;world&quot;</span>]</span><br></code></pre></td></tr></table></figure><p>构建镜像后执行<code>docker run my-image</code>，会输出<code>Hello world</code></p><p>而执行<code>docker run my-image another-world</code>，会输出<code>Hello another-world</code></p><p><code>CMD</code>的参数被覆盖了。</p><p>不过也可以在<code>docker run</code>时使用 <code>--entrypoint</code> 选项覆盖<code>ENTRYPOINT</code>指令</p></blockquote><blockquote><p><strong><code>COPY</code>和<code>ADD</code>的区别</strong><br>COPY用于复制本地文件到目标路径下<br>ADD功能与COPY类似，但是ADD可以将本地压缩包自动解压到目标路径下，如果源文件是URL，还可以下载到目标路径下 </p></blockquote><blockquote><p>Docker 镜像的命名通常采用 “仓库名:标签” 的形式，例如 <code>nginx:latest</code></p></blockquote><blockquote><p><strong>Dockerfile文件一定要以Dockerfile为文件名吗？</strong></p><p>Dockerfile 的文件名不一定非要命名为 <code>Dockerfile</code>。Dockerfile 的文件名可以是任何你喜欢的名称，但构建时需要通过 <code>-f</code> 或 <code>--file</code> 选项明确指定使用的 Dockerfile 文件。</p><p><code>docker build -t my-image -f Dockerfile.dev .</code></p></blockquote><h4 id="2-2-运行容器时覆盖Dockerfile指令"><a href="#2-2-运行容器时覆盖Dockerfile指令" class="headerlink" title="2.2 运行容器时覆盖Dockerfile指令"></a>2.2 运行容器时覆盖Dockerfile指令</h4><p><strong>覆盖CMD指令</strong> </p><figure class="highlight gams"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gams"><span class="hljs-function"><span class="hljs-title">docker</span></span> run ... &lt;New_Command&gt;<br></code></pre></td></tr></table></figure><p><strong>覆盖ENV指令</strong></p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-comment"># 设置新的环境变量</span><br>docker <span class="hljs-built_in">run</span> -e <span class="hljs-string">&quot;key=value&quot;</span> <span class="hljs-built_in">..</span>.<br><br><span class="hljs-comment"># 覆盖HOSTNAME</span><br>docker <span class="hljs-built_in">run</span> -h <span class="hljs-built_in">..</span>.<br></code></pre></td></tr></table></figure><p><strong>覆盖VOLUME指令</strong> </p><figure class="highlight gams"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs gams"><span class="hljs-function"><span class="hljs-title">docker</span></span> run -v ...<br><span class="hljs-function"><span class="hljs-title">docker</span></span> run -volumes-from ...<br></code></pre></td></tr></table></figure><p><strong>覆盖USER指令</strong><br>容器内部的默认用户是root(uid&#x3D;0)。 </p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs routeros">docker <span class="hljs-built_in">run</span> <span class="hljs-attribute">-u</span>=<span class="hljs-string">&quot;...&quot;</span><br><br>docker <span class="hljs-built_in">run</span> <span class="hljs-attribute">--user</span>=<span class="hljs-string">&quot;...&quot;</span><br></code></pre></td></tr></table></figure><p> <strong>覆盖WORKDIR指令</strong> </p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs routeros">docker <span class="hljs-built_in">run</span> <span class="hljs-attribute">-w</span>=<span class="hljs-string">&quot;...&quot;</span><br>docker <span class="hljs-built_in">run</span> <span class="hljs-attribute">-workdir</span>=<span class="hljs-string">&quot;...&quot;</span><br></code></pre></td></tr></table></figure><h4 id="2-3-示例"><a href="#2-3-示例" class="headerlink" title="2.3 示例"></a>2.3 示例</h4><h5 id="2-3-1-构建nginx镜像"><a href="#2-3-1-构建nginx镜像" class="headerlink" title="2.3.1 构建nginx镜像"></a>2.3.1 构建nginx镜像</h5><p><strong>创建目录</strong></p><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs autoit">[root<span class="hljs-symbol">@Charramma</span> ~]<span class="hljs-meta"># mkdir myimage</span><br>[root<span class="hljs-symbol">@Charramma</span> ~]<span class="hljs-meta"># cd myimage</span><br></code></pre></td></tr></table></figure><p><strong>下载nginx安装包</strong> </p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs 1c">[root@Charramma myimage]<span class="hljs-meta"># curl -O http:<span class="hljs-comment">//nginx.org/download/nginx-1.19.2.tar.gz</span></span><br></code></pre></td></tr></table></figure><p><strong>编写Dockerfile</strong></p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs dockerfile"><span class="hljs-comment"># 基本镜像（FROM必须为第一条指令）</span><br><span class="hljs-keyword">FROM</span> centos<br><br><span class="hljs-comment"># 维护者信息</span><br><span class="hljs-keyword">MAINTAINER</span> Charramma(huang.zyn@qq.com)<br><br><span class="hljs-comment"># 容器启动时执行的命令会在</span><br><span class="hljs-keyword">WORKDIR</span><span class="language-bash"> /</span><br><br><span class="hljs-comment"># 将nginx的安装包复制到容器工作目录</span><br><span class="hljs-keyword">COPY</span><span class="language-bash"> nginx-1.19.2.tar.gz  /</span><br><br><span class="hljs-comment"># 编译安装nginx</span><br><span class="hljs-keyword">RUN</span><span class="language-bash"> yum install zlib zlib-devel openssl openssl-devel pcre pcre-devel gcc gcc-c++ autoconf automake make  -y \</span><br><span class="language-bash">    &amp;&amp; tar xf nginx-1.19.2.tar.gz \</span><br><span class="language-bash">    &amp;&amp; <span class="hljs-built_in">cd</span> nginx-1.19.2 \</span><br><span class="language-bash">    &amp;&amp;  ./configure --prefix=/usr/local/nginx --with-threads --with-file-aio --with-http_ssl_module  --with-http_stub_status_module --with-stream  \</span><br><span class="language-bash">    &amp;&amp;make -j 2 ; make install</span><br><br><br><span class="hljs-comment"># 配置环境变量</span><br><span class="hljs-keyword">ENV</span> PATH /usr/local/nginx/sbin:$PATH<br><br><span class="hljs-comment"># 开放的端口</span><br><span class="hljs-keyword">EXPOSE</span> <span class="hljs-number">80</span><br><br><span class="hljs-comment"># 使用这个指令允许用户自定义应用在收到 docker stop 所发送的信号</span><br><span class="hljs-keyword">STOPSIGNAL</span>  SIGTERM<br><br><span class="hljs-comment"># 启动容器后执行的命令</span><br><span class="hljs-keyword">CMD</span><span class="language-bash"> [<span class="hljs-string">&quot;nginx&quot;</span>,<span class="hljs-string">&quot;-g&quot;</span>,<span class="hljs-string">&quot;daemon off;&quot;</span>]</span><br></code></pre></td></tr></table></figure><p><strong>创建镜像</strong></p><figure class="highlight erlang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs erlang"><span class="hljs-string">$ </span>docker build -t my_image .<br><span class="hljs-string">$ </span>docker images<br>REPOSITORY   TAG       IMAGE ID       CREATED         SIZE<br>my_image     latest    <span class="hljs-number">758</span>d6705961a   <span class="hljs-number">5</span> minutes ago   <span class="hljs-number">490</span>MB<br>...<br></code></pre></td></tr></table></figure><p><strong>启动容器</strong></p><figure class="highlight livescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs livescript">[root@Charramma myimage]<span class="hljs-comment"># docker run -d -p 8080:80 --name my_image_nginx 758d6705961a</span><br>fcccb58dac1ec6d063802249e2dc80f064d5398d5c4e4b722b84b408712434b3<br>[root@Charramma myimage]<span class="hljs-comment"># docker ps</span><br>CONTAINER ID   IMAGE          COMMAND                  CREATED         STATUS         PORTS                  NAMES<br>fcccb58dac1e   <span class="hljs-number">758d</span>6705961a   <span class="hljs-string">&quot;nginx -g &#x27;daemon of…&quot;</span>   <span class="hljs-number">5</span> seconds ago   Up <span class="hljs-number">4</span> seconds   <span class="hljs-number">0.0</span>.<span class="hljs-number">0.0</span>:<span class="hljs-number">8080</span>-&gt;<span class="hljs-number">80</span>/tcp   my_image_nginx<br></code></pre></td></tr></table></figure><p><strong>通过访问宿主机的ip的8080端口，访问到容器</strong> （我这里修改了index.html文件，以便于区分访问到的是容器的nginx还是宿主机的nginx）</p><p><img src="https://pic1.imgdb.cn/item/67d5707e88c538a9b5becbc7.png"></p><h5 id="2-3-2-构建Tomcat镜像"><a href="#2-3-2-构建Tomcat镜像" class="headerlink" title="2.3.2 构建Tomcat镜像"></a>2.3.2 构建Tomcat镜像</h5><p>创建一个目录，把tomcat的二进制包和jdk的二进制包搞里头 </p><p>编写Dockerfile </p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs dockerfile"><span class="hljs-keyword">FROM</span> centos<br><span class="hljs-keyword">MAINTAINER</span> Charramma<br><br><span class="hljs-keyword">ADD</span><span class="language-bash"> apache-tomcat-9.0.63.tar.gz /usr/local/</span><br><span class="hljs-keyword">ADD</span><span class="language-bash"> jdk-8u271-linux-x64.tar.gz /usr/local/</span><br><br><span class="hljs-keyword">WORKDIR</span><span class="language-bash"> /usr/local</span><br><br><span class="hljs-keyword">ENV</span> JAVA_HOME /usr/local/jdk1.<span class="hljs-number">8.0</span>_271<br><span class="hljs-keyword">ENV</span> CLASSPATH $JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jar<br><span class="hljs-keyword">ENV</span> CATALINA_HOME /usr/local/apache-tomcat-<span class="hljs-number">9.0</span>.<span class="hljs-number">63</span><br><span class="hljs-keyword">ENV</span> CATALINA_BASH /usr/local/apache-tomcat-<span class="hljs-number">9.0</span>.<span class="hljs-number">63</span><br><span class="hljs-keyword">ENV</span> PATH $PATH:$JAVA_HOME/bin:$CATALINA_HOME/lib:$CATALINA_HOME/bin<br><br><span class="hljs-keyword">RUN</span><span class="language-bash"> <span class="hljs-built_in">mkdir</span> -p /data/logs</span><br><span class="hljs-keyword">RUN</span><span class="language-bash"> <span class="hljs-built_in">rm</span> -rf /usr/local/apache-tomcat-9.0.63/logs</span><br><span class="hljs-keyword">RUN</span><span class="language-bash"> <span class="hljs-built_in">ln</span> -s /data/logs /usr/local/apache-tomcat-9.0.63/logs</span><br><br><span class="hljs-keyword">EXPOSE</span> <span class="hljs-number">8080</span><br><br><span class="hljs-keyword">CMD</span><span class="language-bash"> /usr/local/apache-tomcat-9.0.63/bin/startup.sh &amp;&amp; <span class="hljs-built_in">tail</span> -F /usr/local/apache-tomcat-9.0.63/logs/catalina.out</span><br></code></pre></td></tr></table></figure><p>构建镜像</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">docker</span> build -t tomcat:<span class="hljs-number">9</span>.<span class="hljs-number">0</span>.<span class="hljs-number">63</span> .<br></code></pre></td></tr></table></figure><p>运行容器</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">docker</span> run -d -p <span class="hljs-number">8080</span>:<span class="hljs-number">8080</span> --name tomcat tomcat:<span class="hljs-number">9</span>.<span class="hljs-number">0</span>.<span class="hljs-number">63</span><br></code></pre></td></tr></table></figure><h5 id="2-3-3-将war包打包成镜像"><a href="#2-3-3-将war包打包成镜像" class="headerlink" title="2.3.3 将war包打包成镜像"></a>2.3.3 将war包打包成镜像</h5><p><strong>构建Tomcat镜像</strong></p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs dockerfile"><span class="hljs-comment"># 使用Centos7作为基础镜像</span><br><span class="hljs-keyword">FROM</span> centos:<span class="hljs-number">7</span><br><span class="hljs-keyword">MAINTAINER</span> Charramma<br><br><span class="hljs-comment"># 复制JDK和Tomcat二进制包到镜像中</span><br><span class="hljs-keyword">COPY</span><span class="language-bash"> jdk1.8.0_111.tgz /opt/</span><br><span class="hljs-keyword">COPY</span><span class="language-bash"> apache-tomcat-9.0.78.tar.gz /opt/</span><br><br><span class="hljs-comment"># 设置环境变量</span><br><span class="hljs-keyword">ENV</span> JAVA_HOME=/opt/jdk1.<span class="hljs-number">8.0</span>_111<br><span class="hljs-keyword">ENV</span> CLASSPATH=$JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jar<br><span class="hljs-keyword">ENV</span> CATALINA_HOME=/opt/apache-tomcat-<span class="hljs-number">9.0</span>.<span class="hljs-number">78</span><br><span class="hljs-keyword">ENV</span> CATALINA_BASH=/opt/apache-tomcat-<span class="hljs-number">9.0</span>.<span class="hljs-number">78</span><br><span class="hljs-keyword">ENV</span> PATH=$PATH:$JAVA_HOME/bin:$CATALINA_HOME/lib:$CATALINA_HOME/bin<br><br><span class="hljs-comment"># 解压JDK和Tomcat</span><br><span class="hljs-keyword">RUN</span><span class="language-bash"> tar -xzf /opt/jdk1.8.0_111.tgz -C /opt &amp;&amp; \</span><br><span class="language-bash">    tar -xzf /opt/apache-tomcat-9.0.78.tar.gz -C /opt</span><br><span class="hljs-keyword">RUN</span><span class="language-bash"> useradd -m -s /bin/bash apprunner</span><br><span class="hljs-keyword">RUN</span><span class="language-bash"> <span class="hljs-built_in">chown</span> -R apprunner:apprunner /opt/apache-tomcat-9.0.78</span><br><br><span class="hljs-keyword">USER</span> apprunner<br><br><span class="hljs-keyword">WORKDIR</span><span class="language-bash"> /opt/apache-tomcat-9.0.78</span><br><br><span class="hljs-keyword">EXPOSE</span> <span class="hljs-number">8080</span><br><br><span class="hljs-comment"># 启动Tomcat</span><br><span class="hljs-keyword">CMD</span><span class="language-bash"> [<span class="hljs-string">&quot;bin/catalina.sh&quot;</span>, <span class="hljs-string">&quot;run&quot;</span>]</span><br></code></pre></td></tr></table></figure><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">docker</span> build -t base_tomcat:<span class="hljs-number">9</span>.<span class="hljs-number">0</span>.<span class="hljs-number">78</span> .<br></code></pre></td></tr></table></figure><p><strong>构建一个测试war包</strong></p><p>创建如下目录结构</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">HelloWorld<br>└── WEB<span class="hljs-literal">-INF</span><br>    └── web.<span class="hljs-keyword">xml</span><br><span class="hljs-title">└── index</span>.jsp<br></code></pre></td></tr></table></figure><p>web.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">web-app</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://xmlns.jcp.org/xml/ns/javaee&quot;</span></span><br><span class="hljs-tag">         <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">         <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd&quot;</span></span><br><span class="hljs-tag">         <span class="hljs-attr">version</span>=<span class="hljs-string">&quot;4.0&quot;</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">display-name</span>&gt;</span>HelloWorld<span class="hljs-tag">&lt;/<span class="hljs-name">display-name</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>HelloServlet<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">servlet-class</span>&gt;</span>HelloServlet<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-class</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">servlet</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet-mapping</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>HelloServlet<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">url-pattern</span>&gt;</span>/hello<span class="hljs-tag">&lt;/<span class="hljs-name">url-pattern</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">servlet-mapping</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">web-app</span>&gt;</span><br></code></pre></td></tr></table></figure><p>index.jsp</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs jsp">&lt;%@ page language=<span class="hljs-string">&quot;java&quot;</span> contentType=<span class="hljs-string">&quot;text/html; charset=UTF-8&quot;</span> pageEncoding=<span class="hljs-string">&quot;UTF-8&quot;</span>%&gt;<br>&lt;!DOCTYPE html&gt;<br>&lt;html&gt;<br>&lt;head&gt;<br>    &lt;meta charset=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;<br>    &lt;title&gt;Hello World&lt;/title&gt;<br>&lt;/head&gt;<br>&lt;body&gt;<br>    &lt;h1&gt;Hello World&lt;/h1&gt;<br>&lt;/body&gt;<br>&lt;/html&gt;<br></code></pre></td></tr></table></figure><p>进入HelloWorld目录，执行如下命令，将程序压缩为一个war包</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm"><span class="hljs-keyword">jar </span>-cvf HelloWorld.war *<br></code></pre></td></tr></table></figure><p><strong>编写Dockerfile打包镜像</strong></p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs dockerfile"><span class="hljs-keyword">FROM</span> base_tomcat:<span class="hljs-number">9.0</span>.<span class="hljs-number">78</span><br><br><span class="hljs-keyword">COPY</span><span class="language-bash"> HelloWorld.war /opt/apache-tomcat-9.0.78/webapps/</span><br><br><span class="hljs-keyword">CMD</span><span class="language-bash"> [<span class="hljs-string">&quot;catalina.sh&quot;</span>, <span class="hljs-string">&quot;run&quot;</span>]</span><br></code></pre></td></tr></table></figure><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">docker</span> build -t helloworld:<span class="hljs-number">0</span>.<span class="hljs-number">0</span>.<span class="hljs-number">1</span> .<br></code></pre></td></tr></table></figure><p><strong>运行容器并测试</strong></p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">docker</span> run -d -p <span class="hljs-number">8080</span>:<span class="hljs-number">8080</span> --name myapp helloworld:<span class="hljs-number">0</span>.<span class="hljs-number">0</span>.<span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><p>访问：<a href="http://localhost:8080/HelloWorld/">http://localhost:8080/HelloWorld/</a></p><h3 id="3-镜像相关命令"><a href="#3-镜像相关命令" class="headerlink" title="3. 镜像相关命令"></a>3. 镜像相关命令</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">使用Dockerfile构建镜像</span><br>docker build -t IMAGE_NAME:TAG PATH<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">从镜像仓库搜索镜像</span><br>docker search &lt;image_name&gt;<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">从镜像仓库拉取镜像</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">不接label，默认为latest</span><br>docker pull &lt;images&gt;:&lt;label&gt;<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">查看本地镜像</span><br>docker images<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">显示一个镜像的历史记录</span><br>docker history IMAGE_NAME[:TAG]<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">查看镜像详细信息</span><br>docker inspect IMAGE_NAME[:TAG]<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">为镜像添加标签</span><br>docker tag SOURCE_IMAGE[:TAG] TARGET_IMAGE[:TAG]<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">删除本地镜像</span><br>docker rmi &lt;image_name|image_id&gt;<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">获取镜像</span><br>docker pull training/sinatra<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">启动并进入容器</span><br>docker run -it training/sinatra /bin/bash<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">在容器中添加json、gem两个应用</span><br>root@c52b34fda041:/# gem install json<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">退出容器</span><br>root@c52b34fda041:/# exit<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">提交镜像</span><br>docke commit -m &#x27;描述信息&#x27; -a &#x27;指定更新的用户信息&#x27; c52b34fda041 ouruser/sinatra:v2<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">导出镜像到本地</span><br>docker save 镜像id &gt; xxx.tar<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">将多个镜像打包成一个文件</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">注意此处不要使用镜像<span class="hljs-built_in">id</span>，而是用镜像名:tag的形式，否则导入后镜像名和tag都是none</span><br>docker save -o xxx.tar 镜像1 镜像2 ...<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">导入镜像</span><br>docker load &lt; xxx.tar<br></code></pre></td></tr></table></figure><h3 id="4-镜像仓库"><a href="#4-镜像仓库" class="headerlink" title="4. 镜像仓库"></a>4. 镜像仓库</h3><p>Docker 仓库用来保存镜像，可以理解为代码控制中的代码仓库。同样的，Docker 仓库也有公有和私有的概念。公有的 Docker 仓库名字是 Docker Hub。Docker Hub 提供了庞大的镜像集合供使用。这些镜像可以是自己创建，或者在别人的镜像基础上创建。Docker 仓库是 Docker 的分发部分。</p><p>Docker官方镜像仓库：</p><ul><li><a href="https://hub.docker.com/">https://hub.docker.com/</a></li><li><a href="https://www.docker.com/products/docker-hub">https://www.docker.com/products/docker-hub</a></li></ul><h4 id="4-1-搭建私有镜像仓库"><a href="#4-1-搭建私有镜像仓库" class="headerlink" title="4.1 搭建私有镜像仓库"></a>4.1 搭建私有镜像仓库</h4><blockquote><p>参考：<a href="https://mp.weixin.qq.com/s?__biz=MzI0MDQ4MTM5NQ==&mid=2247487199&idx=1&sn=c67f88f8a4be597054120e4750bfc4ea&chksm=e91b6bc3de6ce2d50bec65dbcd868d2e86666acb006207edbb49ddcd6bfa3a82e35b2181f34a&scene=21#wechat_redirect">https://mp.weixin.qq.com/s?__biz=MzI0MDQ4MTM5NQ==&amp;mid=2247487199&amp;idx=1&amp;sn=c67f88f8a4be597054120e4750bfc4ea&amp;chksm=e91b6bc3de6ce2d50bec65dbcd868d2e86666acb006207edbb49ddcd6bfa3a82e35b2181f34a&amp;scene=21#wechat_redirect</a></p></blockquote><p><strong>第一步：配置私有仓库</strong></p><figure class="highlight tcl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs tcl"><span class="hljs-comment"># 获取registry镜像</span><br>docker pull <span class="hljs-keyword">registry</span><br><br><span class="hljs-comment"># 运行registry容器</span><br>mkdir -p /data/docker_volumn/<span class="hljs-keyword">registry</span><br>docker run -d -v /data/docker_volumn/<span class="hljs-keyword">registry</span>/:/docker/<span class="hljs-keyword">registry</span> -p <span class="hljs-number">5000</span>:<span class="hljs-number">5000</span> --restart=always --name <span class="hljs-keyword">registry</span> <span class="hljs-keyword">registry</span>:latest<br></code></pre></td></tr></table></figure><p>在服务器上访问<a href="http://localhost:5000/v2/_catalog">http://localhost:5000/v2/_catalog</a> 测试私有仓库是否可用</p><p><strong>第二步：客户端测试</strong></p><p>修改客户端配置&#x2F;etc&#x2F;docker&#x2F;daemon.json</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;registry-mirrors&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>        <span class="hljs-string">&quot;https://registry.docker-cn.com&quot;</span><br>    <span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;insecure-registries&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>        <span class="hljs-string">&quot;私有仓库ip地址:5000&quot;</span><br>    <span class="hljs-punctuation">]</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p>保存退出后重启docker使配置生效。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">下载测试镜像（这里是从官方镜像仓库拉取）</span><br>docker pull nginx<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">给测试镜像打tag</span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">上传镜像</span><br>docker push 私有仓库ip:5000/nginx:v1<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">重新查看镜像服务器地址</span><br>curl http://镜像服务器ip:5000/v2/_catalog<br><span class="hljs-meta prompt_"># </span><span class="language-bash">&#123;<span class="hljs-string">&quot;repositories&quot;</span>:[<span class="hljs-string">&quot;nginx&quot;</span>]&#125;</span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">测试镜像拉取</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">先删除所有本地所有镜像便于观察（测试环境）</span><br>docker pull 镜像服务器ip:5000/nginx:v1<br></code></pre></td></tr></table></figure><h4 id="4-2-搭建Harbor私有镜像仓库"><a href="#4-2-搭建Harbor私有镜像仓库" class="headerlink" title="4.2 搭建Harbor私有镜像仓库"></a>4.2 搭建Harbor私有镜像仓库</h4><p>Harbor是一个用于容器镜像管理的开源项目，它提供了一个安全、可扩展的企业级容器镜像注册中心。Harbor旨在帮助组织更好地管理和保护其容器镜像，以确保安全、一致的部署。</p><p>特性与功能：</p><ol><li><strong>镜像管理</strong> </li><li><strong>访问控制</strong></li><li><strong>安全扫描</strong></li><li><strong>复制和复制同步</strong> </li><li><strong>LDAP&#x2F;AD集成</strong></li><li><strong>日志和审计</strong></li></ol><p><strong>环境规划</strong></p><table><thead><tr><th><strong>服务器用途</strong></th><th><strong>IP</strong></th></tr></thead><tbody><tr><td>harbor服务端</td><td>192.168.5.51</td></tr><tr><td>客户端</td><td>192.168.5.98</td></tr></tbody></table><table><thead><tr><th><strong>组件</strong></th><th><strong>版本</strong></th></tr></thead><tbody><tr><td>docker</td><td>20.10.9</td></tr><tr><td>docker-compose</td><td>1.29.2</td></tr><tr><td>harbor</td><td>2.5.3</td></tr></tbody></table><p><strong>前导工作</strong></p><p>服务端和客户端都要执行</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">设置主机名（非必须）</span><br>hostnamectl set-hostname harbor<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">同步时间（非必须）</span><br>yum -y install ntp<br>systemctl enable ntpd<br>systemctl start ntpd<br>ntpdate -u cn.pool.ntp.org<br>hwclock --systohc<br>timedatectl set-timezone Asia/Shanghai<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">关闭swapoff分区</span><br>swapoff -a<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">关闭防火墙</span><br>systemctl stop firewalld<br>systemctl disable firewalld<br>setenforce 0<br>sed -i &#x27;/SELINUX/s/enforcing/disabled/&#x27; /etc/selinux/config<br></code></pre></td></tr></table></figure><p>安装docker</p><p>安装docker-compose</p><p><strong>安装Harbor</strong></p><p>下载地址：<a href="https://github.com/goharbor/harbor/releases">https://github.com/goharbor/harbor/releases</a></p><p>下载并解压</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">tar xf harbor-offline-installer-v2.5.3.tgz<br></code></pre></td></tr></table></figure><p>解压后的内容如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell">common.sh<br>harbor.v2.5.3.tar.gz<br>harbor.yml.tmpl<br>install.sh<br>LICENSE<br>prepare<br></code></pre></td></tr></table></figure><p>修改配置文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@vm-1 harbor]# cp harbor.yml.tmpl harbor.yml<br><br>[root@vm-1 harbor]# vim harbor.yml<br>hostname: 192.168.5.51<br></code></pre></td></tr></table></figure><p>执行prepare</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">./prepare<br></code></pre></td></tr></table></figure><p>执行install.sh</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">./install.sh<br></code></pre></td></tr></table></figure><p>Harbor的启动与停止</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">启动</span><br>docker-compose up -d<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">停止</span><br>docker-compose stop<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">重启</span><br>docker-compose restart<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">停止并删除容器</span><br>docker-compose down -v<br></code></pre></td></tr></table></figure><p>访问harbor</p><p>默认端口为80，需要修改端口请修改docker-compose.yaml对应服务的映射</p><p>默认用户名密码：admin&#x2F;Harbor12345</p><p>harbor的项目分为公开和私有的</p><ul><li>公开项目：所有用户都要访问，通常存放公共的镜像，默认有一个library公开项目</li><li>私有项目：只有授权用户才可以访问</li></ul><p><img src="https://pic1.imgdb.cn/item/67d5711488c538a9b5becbe6.png"></p><p><strong>上传镜像到Harbor步骤</strong></p><p>第一步：构建镜像</p><p>第二步：给镜像打上标签</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">docker <span class="hljs-keyword">tag</span> <span class="hljs-title">镜像名:标签 harborip</span>：端口/项目名称/镜像名称:标签<br></code></pre></td></tr></table></figure><p>第三步：将harbor仓库地址添加为Docker信任列表</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cat</span> &gt;&gt; daemon.json &lt;&lt; <span class="hljs-string">EOF</span><br><span class="hljs-string">&#123;</span><br><span class="hljs-string"> &quot;insecure-registries&quot;: [&#x27;192.168.5.51&#x27;]</span><br><span class="hljs-string">&#125;</span><br><span class="hljs-string">EOF</span><br><br><br><span class="hljs-comment"># 重启docker</span><br>systemctl restart docker<br></code></pre></td></tr></table></figure><p>第四步：推送镜像</p><figure class="highlight gherkin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs gherkin"><span class="hljs-comment"># 登录harbor</span><br>docker login -u <span class="hljs-variable">&lt;harbor_user&gt;</span> -p xxxx <span class="hljs-variable">&lt;harbor_address&gt;</span><br><br><br><span class="hljs-comment"># 推送镜像</span><br>docker push <span class="hljs-variable">&lt;images:tag&gt;</span><br></code></pre></td></tr></table></figure><p>测试：</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">docker</span> pull nginx<br><br>docker tag nginx:latest <span class="hljs-number">192.168.5.51</span>/test/nginx:<span class="hljs-number">8.8.8.8</span><br><br>docker login -u Charramma -p Charramma123<span class="hljs-comment"># 192.168.5.51</span><br><br>docker push <span class="hljs-number">192.168.5.51</span>/test/nginx:<span class="hljs-number">8.8.8.8</span><br></code></pre></td></tr></table></figure><p>在test项目中可以看到对应的镜像</p><p><img src="https://pic1.imgdb.cn/item/67d5720288c538a9b5becc17.png"></p><h2 id="四、容器"><a href="#四、容器" class="headerlink" title="四、容器"></a>四、容器</h2><p>容器是一种轻量级、可移植的虚拟化技术，用于将应用程序及其所有依赖项封装在一个单独的运行环境中。与传统的虚拟机不同，容器共享主机操作系统的内核，使其更为轻量且启动更快。</p><p>容器之间通过来自内核的命名空间相互隔离，其中pid，net，ipc，mnt，uts等命名空间将容器的进程、网络、消息、文件系统和hostname隔离开。</p><p>容器本身并不是 Docker 独有的虚拟化技术。Docker 在推广容器技术方面起到了关键作用，它通过简化容器的创建、部署和管理，使得容器技术更加流行和易于使用。然而，容器技术的概念并不是 Docker 独有的，还有其他容器运行时和编排工具，如 Kubernetes、containerd、rkt 等。</p><p><strong>容器的相关命令</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">创建容器，但不启动它</span><br>docker create --name &lt;container_name&gt; &lt;image_id&gt;<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">启动容器</span><br>docker start &lt;container_name&gt;<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">创建并启动容器</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">-d 以守护进程运行</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">-p 8080:80 容器的80端口映射到宿主机的8080端口</span><br>docker run -d -p 8080:80 --name &lt;container_name&gt; &lt;image_id&gt;<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">进入容器 -i 打开交互式界面 -t 分配一个伪终端</span><br>docker exec -it &lt;container_name&gt; /bin/bash<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">停止容器运行</span><br>docker stop &lt;container_name&gt;<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">重启容器</span><br>docker restart &lt;container_name&gt;<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">查看运行中的容器</span><br>docker ps<br><span class="hljs-meta prompt_"># </span><span class="language-bash">-a 查看所有容器</span> <br><span class="hljs-meta prompt_"># </span><span class="language-bash">-f 过滤</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">-n 列出最近创建的n个容器</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">-q 只显示容器<span class="hljs-built_in">id</span></span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">删除容器，运行中的容器无法删除</span><br>docker rm &lt;container_id&gt;<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">查看容器日志</span><br>docker logs<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">查看容器详细信息</span><br>docker container inspect &lt;container_name&gt;<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">导出容器的文件系统</span><br>docker export -o xxx.tar &lt;container_id&gt;<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">导入容器的文件系统为一个镜像</span><br>docker image xxx.tar &lt;image&gt;:&lt;version&gt;<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">将容器的文件拷贝至宿主机</span><br>docker cp &lt;container_id&gt;:&lt;container_path&gt; &lt;宿主机——path<br><span class="hljs-meta prompt_"># </span><span class="language-bash">向容器内传输文件</span><br>docker cp &lt;宿主机文件&gt; &lt;container_id&gt;:&lt;container_path&gt;<br></code></pre></td></tr></table></figure><h2 id="五、Docker网络"><a href="#五、Docker网络" class="headerlink" title="五、Docker网络"></a>五、Docker网络</h2><h3 id="1-Docker网络模式"><a href="#1-Docker网络模式" class="headerlink" title="1. Docker网络模式"></a>1. Docker网络模式</h3><h4 id="1-1-网络模式种类"><a href="#1-1-网络模式种类" class="headerlink" title="1.1 网络模式种类"></a>1.1 网络模式种类</h4><table><thead><tr><th>网络模式</th><th>指定方式</th><th>说明</th></tr></thead><tbody><tr><td>桥接模式（Bridge）</td><td><code>docker run --network=bridge</code></td><td>每个容器都分配一个唯一的 IP 地址，并且容器之间可以通过这个 IP 地址进行通信。此外，容器可以通过主机的 IP 地址和外部网络进行通信。</td></tr><tr><td>主机模式（Host）</td><td><code>docker run --network=host</code></td><td>容器和主机共享网络命名空间，容器使用主机的网络栈。</td></tr><tr><td>容器模式（Container）</td><td><code>docker run --network=container1:container2</code></td><td>一个容器可以通过指定另一个容器的网络命名空间来共享网络栈。这意味着两个容器可以直接通过 localhost 相互通信，就像它们在同一台主机上一样。</td></tr><tr><td>无网络模式（None）</td><td><code>docker run --network=none</code></td><td>容器不会连接到任何网络，即使容器可以运行，但是无法进行网络通信。这个模式适用于一些特殊情况，例如只希望使用 IPC 或 UTS 命名空间的场景。</td></tr><tr><td>覆盖网络模式（Overlay）</td><td></td><td>允许在多个 Docker 主机上的容器进行通信。它通常用于构建跨主机的容器集群，比如 Docker Swarm。</td></tr></tbody></table><blockquote><p>默认的网络模式是桥接模式</p></blockquote><p>Docker在安装时就会创建3个网络</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sql">$ docker network ls<br>NETWORK ID     NAME      DRIVER    <span class="hljs-keyword">SCOPE</span><br>b48206d11ccb   bridge    bridge    <span class="hljs-keyword">local</span><br><span class="hljs-number">01</span>f8c5f396b0   host      host      <span class="hljs-keyword">local</span><br><span class="hljs-number">03</span>fe4e77c712   <span class="hljs-keyword">none</span>      <span class="hljs-keyword">null</span>      <span class="hljs-keyword">local</span><br></code></pre></td></tr></table></figure><h4 id="1-2-Bridge模式"><a href="#1-2-Bridge模式" class="headerlink" title="1.2 Bridge模式"></a>1.2 Bridge模式</h4><p>Docker server启动时，主机会自动创建docker0虚拟网桥，使用bridge模式的容器会连接到这个网桥之上，这样主机的容器相当于在一个二层网络中。Bridge网络会为每个容器分配veth pair对，网卡的一头在容器中，一头在挂在网桥docker0上。</p><p>查看docker0上挂载的网卡</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">安装bridge-utils工具</span><br>yum install bridge-utils -y<br><br>brctl show<br></code></pre></td></tr></table></figure><p>如下图，docker0网桥上挂载了两个网卡，说明已经创建了两个使用Bridge模式的容器</p><p><img src="https://pic1.imgdb.cn/item/67d5725d88c538a9b5becc3b.png" alt="1661918793523-f59bfcdc-02b5-403b-99e2-a98b68ac9b98.png"></p><p>Bridge网络模式的信息</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm"><span class="hljs-comment"># 查看bridge网络模式的详细信息</span><br>docker network <span class="hljs-keyword">inspect </span><span class="hljs-keyword">bridge</span><br></code></pre></td></tr></table></figure><p>bridge网段是172.17.0.0&#x2F;16，网关占用第一个ip（172.17.0.1），剩下的ip随机分配给创建的容器</p><h4 id="1-3-Host模式"><a href="#1-3-Host模式" class="headerlink" title="1.3 Host模式"></a>1.3 Host模式</h4><p>容器将不会获得一个独立的Network Namespace，而是和宿主机共用一个Network Namespace。容器将不会虚拟出自己的网卡，配置自己的IP等，而是使用宿主机的IP和端口。但是，容器的其他方面，如文件系统、进程列表等还是和宿主机隔离的。</p><p>示例：</p><p>使用host模式启动一个nginx容器</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">docker <span class="hljs-built_in">run</span> -d <span class="hljs-attribute">--net</span>=host --name mynginx nginx:latest<br></code></pre></td></tr></table></figure><p>该容器直接使用了宿主机的端口和ip</p><p><img src="https://pic1.imgdb.cn/item/67d5729288c538a9b5becc3f.png" alt="1661918832364-6df31a18-2832-4a8b-b897-eae8ebfbc3a5.png"></p><p>修改容器nginx的index.html便于观察</p><p>访问<a href="http://localhost,进入容器nginx的页面/">http://localhost，进入容器nginx的页面</a></p><p><img src="https://pic1.imgdb.cn/item/67d572ca88c538a9b5becc4c.png"></p><h4 id="1-4-Container模式"><a href="#1-4-Container模式" class="headerlink" title="1.4 Container模式"></a>1.4 Container模式</h4><p>新创建的容器和已经存在的一个容器共享一个 Network Namespace，而不是和宿主机共享。新创建的容器不会创建自己的网卡，配置自己的 IP，而是和一个指定的容器共享 IP、端口范围等。同样，两个容器除了网络方面，其他的如文件系统、进程列表等还是隔离的。两个容器的进程可以通过 lo 网卡设备通信。</p><p>即共用Network Namespace的容器中间不存在网络隔离，但与宿主机及其他容器之间存在网络隔离</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-comment"># 创建一个container模式的容器</span><br>docker <span class="hljs-built_in">run</span> -itd <span class="hljs-attribute">--net</span>=container:test1 --name testcontainer busybox<br></code></pre></td></tr></table></figure><h4 id="1-5-None模式"><a href="#1-5-None模式" class="headerlink" title="1.5 None模式"></a>1.5 None模式</h4><p>使用none模式启动的Docker容器拥有自己的Network Namespace，但是没有网卡、ip、路由等信息，需要自己为容器添加网卡、配置ip等</p><h4 id="1-6-Overlay网络"><a href="#1-6-Overlay网络" class="headerlink" title="1.6 Overlay网络"></a>1.6 Overlay网络</h4><p>Docker 的 Overlay 网络是一种用于容器集群的网络模式，它允许在多个 Docker 主机之间创建一个透明的、覆盖的网络，以便容器可以在不同主机上进行通信。这对于构建分布式应用程序和容器编排系统（如 Docker Swarm）非常有用。</p><p>使用步骤：</p><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs livecodeserver"><span class="hljs-comment"># 创建一个名为 my_overlay_network 的 Overlay 网络</span><br>docker network <span class="hljs-built_in">create</span> <span class="hljs-comment">--driver overlay my_overlay_network</span><br><br><span class="hljs-comment"># 启动服务并加入 Overlay 网络</span><br>docker service <span class="hljs-built_in">create</span> <span class="hljs-comment">--name my_service --network my_overlay_network my_image</span><br><br><span class="hljs-comment"># 在其他主机上启动服务</span><br>docker service <span class="hljs-built_in">create</span> <span class="hljs-comment">--name my_service --network my_overlay_network my_image</span><br><br></code></pre></td></tr></table></figure><p>在其他 Docker 主机上使用相同的 Overlay 网络和服务名称启动服务，这样它们就能够透明地通过 Overlay 网络进行通信。</p><h3 id="2-Docker容器的通信"><a href="#2-Docker容器的通信" class="headerlink" title="2. Docker容器的通信"></a>2. Docker容器的通信</h3><p>主机内部，相同网段，如bridge模式下的容器，可以互相通信，不过是通过bridge间接实现通信，不是直接端对端。</p><p>在容器内部可以看到路由表，接口是eth0，通过网卡将信息传输到docker0，docker0广播地址，通过网卡找到其他容器</p><p><img src="https://pic1.imgdb.cn/item/67d5731e88c538a9b5becc55.png" alt="1661918888487-8feeb447-6ecc-41fd-a8ca-837f63bd2136.png"></p><p><strong>主机内部不同网络不能直接通信</strong></p><p>实现不同网络通信的方法：</p><p>方法一：把想要通信的容器放到同一网络</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-comment"># 把container id为e5f81fb4c00f的容器加入bridge网络中</span><br>docker<span class="hljs-built_in"> network </span>connect<span class="hljs-built_in"> bridge </span>e5f81fb4c00f<br></code></pre></td></tr></table></figure><p>e5f81fb4c00f容器会增加一个网卡，并分配一个bridge网络网段的ip</p><p>方法二：修改底层iptables实现网络的通信</p><p><strong>容器与外部世界的通信</strong></p><p>容器默认可以访问外网</p><p><strong>扩展：–link</strong></p><figure class="highlight gherkin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs gherkin"><span class="hljs-comment"># 将一个容器与另一个容器链接起来，使两个容器之间可以互相通信</span><br><span class="hljs-comment"># 两个容器之间可以通过主机名访问</span><br>docker run -d --name <span class="hljs-variable">&lt;container_name&gt;</span> --link <span class="hljs-variable">&lt;other containter&gt;</span>[:<span class="hljs-variable">&lt;other container alias&gt;</span>] <span class="hljs-variable">&lt;images&gt;</span><br></code></pre></td></tr></table></figure><p>本质上是在容器的hosts文件里添加一个名字对应ip地址解析记录</p><h3 id="3-Docker网络相关命令"><a href="#3-Docker网络相关命令" class="headerlink" title="3. Docker网络相关命令"></a>3. Docker网络相关命令</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">查看网络列表</span><br>docker network ls<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">查看网络详细信息</span><br>docker network inspect &lt;network_name_or_id&gt;<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">创建网络</span><br>docker network create --driver &lt;driver&gt; &lt;network_name&gt;<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">连接容器到网络</span><br>docker network connect &lt;network_name&gt; &lt;container_name_or_id&gt;<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">断开容器网络连接</span><br>docker network disconnect &lt;network_name&gt; &lt;container_name_or_id&gt;<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">移除网络</span><br>docker network rm &lt;network_name&gt;<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">为容器指定网络模式</span><br>docker run --network=&lt;network_name&gt; my_container<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">查看容器的网络信息</span><br>docker inspect --format=&#x27;&#123;&#123;.NetworkSettings.Networks&#125;&#125;&#x27; &lt;container_name_or_id&gt;<br></code></pre></td></tr></table></figure><h2 id="六、Docker数据卷"><a href="#六、Docker数据卷" class="headerlink" title="六、Docker数据卷"></a>六、Docker数据卷</h2><h3 id="1-数据卷介绍"><a href="#1-数据卷介绍" class="headerlink" title="1. 数据卷介绍"></a>1. 数据卷介绍</h3><p>数据卷是一种用于持久化存储和在容器之间共享数据的机制。数据卷可以看作是容器内外的一种特殊目录，它绕过了容器文件系统的生命周期，因此数据可以在容器之间共享，并且可以保留在容器停止或删除后。</p><p>特点：</p><ol><li>实现容器间的数据共享</li><li>对数据卷的修改会立马生效</li><li>对数据卷的修改不会影响容器</li><li>容器销毁后，数据卷依然存在，直到没有容器使用它。</li></ol><p>Docker挂载数据卷的方式有三种：</p><ol><li>绑定挂载：指定宿主机上的具体目录，并将该目录挂载到容器中</li><li>使用Docker卷：不需要直接指定宿主机的路径，而是由 Docker 引擎自动创建和管理数据卷。这些数据卷通常存储在宿主机文件系统的 <code>/var/lib/docker/volumes/</code> 目录下</li><li>tmpfs</li></ol><p><img src="https://pic1.imgdb.cn/item/67d573fc88c538a9b5becc7b.png" alt="docker数据卷的挂载.png"></p><h3 id="2-三种数据卷的创建"><a href="#2-三种数据卷的创建" class="headerlink" title="2. 三种数据卷的创建"></a>2. 三种数据卷的创建</h3><p><strong>匿名数据卷</strong></p><p>通常用于临时或一次性数据需求，因为它们的名称是由Docker随机生成的，不太容易管理。当没有容器使用匿名数据卷，并且没有其他引用指向它时，Docker会在一定时间后自动将这些匿名数据卷删除。</p><p>创建匿名数据卷</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">将宿主机的/host/path挂载到容器随机挂载点</span><br>docker run -v /host/path my_image<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">查看匿名数据卷挂载到了容器什么位置</span><br>docker inspect -f &#x27;&#123;&#123;.Mounts&#125;&#125;&#x27; &lt;container_id&gt;<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">可以显示指定需要挂载的位置</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">宿主机/host/path 将被挂载到容器内的 /container/path</span><br>docker run -v /host/path:/container/path my_image<br></code></pre></td></tr></table></figure><p><strong>具名数据卷</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">将数据卷挂载到容器内的/container/path路径</span><br>docker run -v 数据卷名:/container/path my_image<br></code></pre></td></tr></table></figure><p>具名数据卷的存储位置在 Docker 的数据卷管理系统中，通常在 <code>/var/lib/docker/volumes/</code> 目录下，在这个目录中，Docker 会为每个具名数据卷创建一个单独的目录，并使用卷的名称作为目录的名称。</p><blockquote><p>具名数据卷无法使用绑定挂载</p></blockquote><p>具名数据卷还可以使用docker volume create命令创建，然后再挂载</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">创建数据卷</span><br>docker volume create &lt;volume name&gt;<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">挂载数据卷</span><br>docker run -d -v &lt;volume name&gt;:&lt;container path&gt;<br></code></pre></td></tr></table></figure><p><strong>数据卷容器</strong></p><p>数据卷容器是一种将数据卷挂载到一个专用容器中的方法，其他容器可以通过<code>--volumes-from</code>选项访问这些数据卷。</p><p>这种方法允许在多个容器之间共享和重用数据卷。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">创建一个数据卷容器，将匿名数据卷挂载到该容器的/data路径，数据卷在/var/lib/docker/volumes/ 目录下</span><br>docker run -v /data --name data_container my_image<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">创建一个数据卷容器，将你们数据卷挂载到该容器的/data路径，指定数据卷使用的宿主机目录</span><br>docker create -v /host/path:/container/path --name data_container my_image<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">创建一个数据卷容器，将具名数据卷data_volume挂载到该容器的/data路径</span><br>docker create -v data_volume:/data --name data_container my_image<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">在其他容器中使用数据卷容器的数据</span><br>docker run --volumes-from data_container another_image<br></code></pre></td></tr></table></figure><blockquote><p>数据卷容器实际上是创建了一个不被启动的容器，因此创建数据卷容器时可以使用任何合适的镜像，因为数据卷容器本身并不运行应用程序，只是为了创建和维护数据卷而存在。</p><p>数据卷容器挂载了一个数据卷，其他容器可以使用该数据卷。</p></blockquote><blockquote><p>为什么要使用数据卷容器，而不是直接使用匿名数据卷或具名数据卷？</p></blockquote><p><strong><code>--mount</code>参数</strong></p><p>除了<code>-v</code>和<code>--volume</code>参数，<code>--mount</code>参数也可以为容器挂载数据卷</p><p><code>--mount</code>参数由多个键值对组成，以逗号分隔</p><ul><li><code>type</code>挂载类型，值可为bind、volume、tmpfs</li><li><code>source</code>(<code>src</code>) 挂载方式，type为volume时，值为卷名称，匿名卷可省略该项</li><li><code>destination</code>(<code>dst</code>) 容器中的文件或目录</li><li><code>readonly</code> 设置只读</li></ul><figure class="highlight sqf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sqf">docker run -d --mount <span class="hljs-built_in">type</span>=volume,src=&lt;卷名称&gt;,dst=&lt;容器文件或目录&gt; --<span class="hljs-built_in">name</span> &lt;container <span class="hljs-built_in">name</span>&gt; &lt;<span class="hljs-built_in">image</span> <span class="hljs-built_in">name</span>&gt;<br></code></pre></td></tr></table></figure><blockquote><p><code>-v</code>和<code>--mount</code>的差别</p><p>使用<code>-v</code>绑定宿主机上不存在的文件或者目录时，会自动生成相应的文件或者目录，<code>--mount</code>则会抛出异常，所以用<code>--mount</code>指定文件和路径时需要提前创建以保证其存在。</p></blockquote><h3 id="3-数据卷相关命令"><a href="#3-数据卷相关命令" class="headerlink" title="3. 数据卷相关命令"></a>3. 数据卷相关命令</h3><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs dockerfile"><span class="hljs-comment"># 创建具名数据卷</span><br>docker <span class="hljs-keyword">volume</span><span class="language-bash"> create [OPTIONS] [VOLUME]</span><br><br><span class="hljs-comment"># 列出所有数据卷（不会显示匿名数据卷）</span><br>docker <span class="hljs-keyword">volume</span><span class="language-bash"> <span class="hljs-built_in">ls</span> [OPTIONS]</span><br><br><span class="hljs-comment"># 查看数据卷详细信息</span><br>docker <span class="hljs-keyword">volume</span><span class="language-bash"> inspect [VOLUME...]</span><br><br><span class="hljs-comment"># 删除数据卷</span><br>docker <span class="hljs-keyword">volume</span><span class="language-bash"> <span class="hljs-built_in">rm</span> VOLUME [VOLUME...]</span><br><br><span class="hljs-comment"># 删除不被容器使用的数据卷</span><br>docker <span class="hljs-keyword">volume</span><span class="language-bash"> prune [OPTIONS]</span><br><br><span class="hljs-comment"># 在容器中挂载数据卷</span><br>docker <span class="hljs-keyword">run</span><span class="language-bash"> -v VOLUME:/container/path my_image</span><br><br><span class="hljs-comment"># 从容器中移除数据卷</span><br>docker <span class="hljs-keyword">run</span><span class="language-bash"> -v VOLUME:/container/path my_image</span><br></code></pre></td></tr></table></figure><h2 id="七、Docker-Compose"><a href="#七、Docker-Compose" class="headerlink" title="七、Docker Compose"></a>七、Docker Compose</h2><h3 id="1-简介"><a href="#1-简介" class="headerlink" title="1. 简介"></a>1. 简介</h3><p>Docker Compose是一个用于定义和运行多个Docker容器的工具。它允许您通过一个单独的文件（通常称为<code>docker-compose.yml</code>）来配置应用程序的服务、网络和卷，然后使用一个简单的命令来启动整个应用程序。</p><p>相当于一套自动化启动Docker容器的脚本</p><blockquote><p>Docker-Compose的工程配置文件默认为<code>docker-compose.yml</code>，可通过环境变量<code>COMPOSE_FILE</code>或<code>-f</code>参数自定义配置文件</p></blockquote><h3 id="2-安装Docker-Compose"><a href="#2-安装Docker-Compose" class="headerlink" title="2. 安装Docker Compose"></a>2. 安装Docker Compose</h3><p>下载Docker Compose稳定版本 </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">wget https://github.com/docker/compose/releases/download/1.29.2/docker-compose-$(<span class="hljs-built_in">uname</span> -s)-$(<span class="hljs-built_in">uname</span> -m)<br><br><span class="hljs-built_in">mv</span> docker-compose-$(<span class="hljs-built_in">uname</span> -s)-$(<span class="hljs-built_in">uname</span> -m) /usr/local/bin/docker-compose<br><br><span class="hljs-built_in">chmod</span> +x /usr/local/bin/docker-compose<br></code></pre></td></tr></table></figure><p>测试安装</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">docker-compose -v</span><br></code></pre></td></tr></table></figure><h3 id="3-使用实例"><a href="#3-使用实例" class="headerlink" title="3. 使用实例"></a>3. 使用实例</h3><p>官方实例：<a href="https://docs.docker.com/compose/gettingstarted/">https://docs.docker.com/compose/gettingstarted/</a></p><p>该应用程序使用 Flask 框架并在 Redis 中维护一个命中计数器。</p><p><strong>第一步：准备好镜像所需的代码和Dockerfile</strong></p><p>创建项目文件夹 </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">mkdir</span> composetest<br><span class="hljs-built_in">cd</span> composetest<br></code></pre></td></tr></table></figure><p>创建演示项目 </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> time<br><br><span class="hljs-keyword">import</span> redis<br><span class="hljs-keyword">from</span> flask <span class="hljs-keyword">import</span> Flask<br><br>app = Flask(__name__)<br>cache = redis.Redis(host=<span class="hljs-string">&#x27;redis&#x27;</span>, port=<span class="hljs-number">6379</span>)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">get_hit_count</span>():<br>    retries = <span class="hljs-number">5</span><br>    <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>        <span class="hljs-keyword">try</span>:<br>            <span class="hljs-keyword">return</span> cache.incr(<span class="hljs-string">&#x27;hits&#x27;</span>)<br>        <span class="hljs-keyword">except</span> redis.exceptions.ConnectionError <span class="hljs-keyword">as</span> exc:<br>            <span class="hljs-keyword">if</span> retries == <span class="hljs-number">0</span>:<br>                <span class="hljs-keyword">raise</span> exc<br>            retries -= <span class="hljs-number">1</span><br>            time.sleep(<span class="hljs-number">0.5</span>)<br><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/&#x27;</span></span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">hello</span>():<br>    count = get_hit_count()<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;Hello World! I have been seen &#123;&#125; times.\n&#x27;</span>.<span class="hljs-built_in">format</span>(count)<br></code></pre></td></tr></table></figure><p>编写依赖列表文件requirements.txt </p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">flask</span><br><span class="hljs-attribute">redis</span><br></code></pre></td></tr></table></figure><p>编写Dockerfile文件 </p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs dockerfile"><span class="hljs-keyword">FROM</span> python:<span class="hljs-number">3.7</span>-alpine<br><span class="hljs-keyword">WORKDIR</span><span class="language-bash"> /code</span><br><span class="hljs-keyword">ENV</span> FLASK_APP=app.py<br><span class="hljs-keyword">ENV</span> FLASK_RUN_HOST=<span class="hljs-number">0.0</span>.<span class="hljs-number">0.0</span><br><span class="hljs-keyword">RUN</span><span class="language-bash"> apk add --no-cache gcc musl-dev linux-headers</span><br><span class="hljs-keyword">COPY</span><span class="language-bash"> requirements.txt requirements.txt</span><br><span class="hljs-keyword">RUN</span><span class="language-bash"> pip install -r requirements.txt</span><br><span class="hljs-keyword">EXPOSE</span> <span class="hljs-number">5000</span><br><span class="hljs-keyword">COPY</span><span class="language-bash"> . .</span><br><span class="hljs-keyword">CMD</span><span class="language-bash"> [<span class="hljs-string">&quot;flask&quot;</span>, <span class="hljs-string">&quot;run&quot;</span>]</span><br></code></pre></td></tr></table></figure><p><strong>第二步：启动项目</strong></p><p>使用docker-compose.yml定义构成应用程序的服务 </p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">version:</span> <span class="hljs-string">&quot;3.9&quot;</span><br><span class="hljs-attr">services:</span><br>  <span class="hljs-attr">web:</span><br>    <span class="hljs-attr">build:</span> <span class="hljs-string">.</span><br>    <span class="hljs-attr">ports:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;5000:5000&quot;</span><br>  <span class="hljs-attr">redis:</span><br>    <span class="hljs-attr">image:</span> <span class="hljs-string">&quot;redis:alpine&quot;</span><br></code></pre></td></tr></table></figure><p>启动并运行整个应用程序 </p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">docker-compose up</span><br></code></pre></td></tr></table></figure><p><strong>第三步：测试</strong></p><p>相关容器已运行</p><p><img src="https://pic1.imgdb.cn/item/67d5749488c538a9b5beccaa.png" alt="1661919489465-0e0a37b6-45ac-40af-a7db-3ce9bd33d6c3.png"></p><p>演示程序会显示这个网站的访问次数</p><p><img src="https://pic1.imgdb.cn/item/67d574d488c538a9b5beccbd.png" alt="1661919499618-a163534e-af42-4343-abbc-d02554617fb8.png"></p><p>查看容器日志</p><p><img src="https://pic1.imgdb.cn/item/67d574fa88c538a9b5becccd.png" alt="1661919511986-7bc246ee-d888-4db4-907e-3c1628ab9c80.png"></p><p>增加redis容器数量</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">docker-compose scale <span class="hljs-attribute">redis</span>=2<br></code></pre></td></tr></table></figure><p><img src="https://pic1.imgdb.cn/item/67d5753c88c538a9b5beccd2.png"></p><h3 id="4-详解docker-compose-yml文件的结构"><a href="#4-详解docker-compose-yml文件的结构" class="headerlink" title="4. 详解docker-compose.yml文件的结构"></a>4. 详解docker-compose.yml文件的结构</h3><p>一份标准配置文件应该包含 version、services、networks 三大部分</p><p>示例：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">version:</span> <span class="hljs-string">&#x27;2&#x27;</span><br><span class="hljs-attr">services:</span><br><span class="hljs-comment"># 服务名</span><br><span class="hljs-attr">web:</span><br> <span class="hljs-attr">image:</span> <span class="hljs-string">dockercloud/hello-world</span><br> <span class="hljs-attr">ports:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-number">8080</span><br>    <span class="hljs-attr">networks:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">front-tier</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">back-tier</span><br><br>  <span class="hljs-attr">redis:</span><br>    <span class="hljs-attr">image:</span> <span class="hljs-string">redis</span><br>    <span class="hljs-attr">links:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">web</span><br>    <span class="hljs-attr">networks:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">back-tier</span><br><br>  <span class="hljs-attr">lb:</span><br>    <span class="hljs-attr">image:</span> <span class="hljs-string">dockercloud/haproxy</span><br>    <span class="hljs-attr">ports:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-number">80</span><span class="hljs-string">:80</span><br>    <span class="hljs-attr">links:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">web</span><br>    <span class="hljs-attr">networks:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">front-tier</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">back-tier</span><br>    <span class="hljs-attr">volumes:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">/var/run/docker.sock:/var/run/docker.sock</span> <br><br><span class="hljs-attr">networks:</span><br>  <span class="hljs-attr">front-tier:</span><br>    <span class="hljs-attr">driver:</span> <span class="hljs-string">bridge</span><br>  <span class="hljs-attr">back-tier:</span><br><span class="hljs-attr">driver:</span> <span class="hljs-string">bridge</span><br></code></pre></td></tr></table></figure><ul><li><p><strong>version</strong>  定义Compose版本。Compose目前有三个版本分别为Version 1，Version 2，Version 3</p></li><li><p><strong>service</strong>  定义服务</p><ul><li><p><code>image</code>  所使用的镜像。如果镜像在本地不存在，Compose 将会尝试拉取这个镜像。</p></li><li><p><code>build</code>  基于Dockerfile构建镜像</p></li><li><p><code>command</code>  覆盖容器启动后默认执行的命令</p></li><li><p><code>container_name</code>  指定容器名</p></li><li><p><code>ports</code>  映射服务端口</p></li><li><p><code>dns</code>  自定义DNS服务器，可以是一个值，也可以是一个列表</p></li><li><p><code>links</code>  与docker run的–link参数一样功能</p></li><li><p><code>volumes</code>  挂载数据卷</p></li><li><p><code>networks</code>  加入指定网络</p></li></ul></li></ul><h3 id="5-docker-compose常用命令"><a href="#5-docker-compose常用命令" class="headerlink" title="5. docker-compose常用命令"></a>5. docker-compose常用命令</h3><figure class="highlight gauss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs gauss">docker-compose up <span class="hljs-meta">#启动容器</span><br>docker-compose down <span class="hljs-meta">#关闭并删除容器</span><br>docker-compose [start | <span class="hljs-keyword">stop</span> | <span class="hljs-built_in">pause</span> | restart] <span class="hljs-meta">#启动/停止/暂停/重启 容器 </span><br>docker-compose <span class="hljs-keyword">run</span> NAME ping baidu.com <span class="hljs-meta">#在指定容器运行命令</span><br>docker-compose kill <span class="hljs-meta">#机制停止容器</span><br>docker-compose <span class="hljs-built_in">scale</span> <span class="hljs-meta">#设置服务运行的容器个数</span><br>docker-compose ps <span class="hljs-meta">#列出项目中所有的容器</span><br>docker-compose rm <span class="hljs-meta">#删除容器</span><br>docker-compose logs <span class="hljs-meta">#查看日志</span><br>docker-compose bulid <span class="hljs-meta">#构建项目中的容器</span><br>docker-compose <span class="hljs-keyword">push</span> <span class="hljs-meta">#推送镜像</span><br>docker-compose pull <span class="hljs-meta">#拉取依赖镜像</span><br>docker-compose config <span class="hljs-meta">#查看项目容器配置</span><br>docker-compose <span class="hljs-keyword">create</span> <span class="hljs-meta">#为服务创建容器</span><br>docker-compose <span class="hljs-built_in">exec</span> NAME /bin/bash <span class="hljs-meta">#进入指定容器</span><br>docker-compose port NAME 端口号 <span class="hljs-meta">#显示某个容器端口所映射的公共端口</span><br></code></pre></td></tr></table></figure><p>参数选项：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs stylus">-f <span class="hljs-attr">--file</span> FILE指定Compose模板文件，默认为docker-compose<span class="hljs-selector-class">.yml</span><br>-<span class="hljs-selector-tag">p</span> <span class="hljs-attr">--project-name</span> NAME 指定项目名称，默认使用当前所在目录为项目名<br><span class="hljs-attr">--verbose</span>  输出更多调试信息<br>-v，-version 打印版本并退出<br><span class="hljs-attr">--log-level</span> LEVEL 定义日志等级(DEBUG, INFO, WARNING, ERROR, CRITICAL)<br></code></pre></td></tr></table></figure><h2 id="八、Docker-Swarm"><a href="#八、Docker-Swarm" class="headerlink" title="八、Docker Swarm"></a>八、Docker Swarm</h2><blockquote><p>参考：<a href="https://www.cnblogs.com/zhujingzhi/p/9792432.html#_label0">https://www.cnblogs.com/zhujingzhi/p/9792432.html#_label0</a></p></blockquote><h3 id="1-简介-1"><a href="#1-简介-1" class="headerlink" title="1. 简介"></a>1. 简介</h3><ul><li>Docker官方的开源容器编排项目，用于在多个服务器或主机上创建容器集群服务。</li><li>Docker swarm将一群Docker宿主机变成一个单一的虚拟主机，Swarm使用标准的Docker API接口作为其前端的访问入口，使用Docker cli可以直接与swarm集群通信。</li><li>Docker 1.12 版本发布之后，该项目合并到了 Docker 中，成为 Docker 的一个子命令</li></ul><p>架构：</p><p><img src="https://pic1.imgdb.cn/item/67d5757888c538a9b5beccd8.png" alt="1661922459261-91413019-6846-44e5-8676-f520b9581b19.png"></p><ul><li>swarm是典型的master-slave结构，manager是中心管理节点，各个node上运行agent接受manager的统一管理</li><li>集群会自动通过Raft协议分布式选举出manager节点，无需额外的发现服务支持，避免了单点的瓶颈问题</li><li>集群内置了DNS的负载均衡和对外部负载均衡机制的集成支持。</li></ul><h3 id="2-实例：搭建Docker集群"><a href="#2-实例：搭建Docker集群" class="headerlink" title="2. 实例：搭建Docker集群"></a>2. 实例：搭建Docker集群</h3><table><thead><tr><th>IP</th><th>主机名</th><th>角色</th></tr></thead><tbody><tr><td>192.168.5.31</td><td>test-01</td><td>manager</td></tr><tr><td>192.168.5.32</td><td>test-02</td><td>worker</td></tr><tr><td>192.168.5.33</td><td>test-03</td><td>worker</td></tr></tbody></table><h4 id="2-1-创建swarm集群并添加节点"><a href="#2-1-创建swarm集群并添加节点" class="headerlink" title="2.1 创建swarm集群并添加节点"></a>2.1 创建swarm集群并添加节点</h4><p>创建swarm集群 </p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs routeros">[root@test-01 ~]# docker swarm init --advertise-addr 192.168.5.31<br>Swarm initialized: current node (lmwc1zojj4ep2sbloygxmhgge) is now a manager.<br><br><span class="hljs-keyword">To</span> <span class="hljs-built_in">add</span> a worker <span class="hljs-keyword">to</span> this swarm, <span class="hljs-built_in">run</span> the following command:<br><br>    docker swarm join --token SWMTKN-1-696as9gi1evz4umswvfdaql78gfmydgo9zvhlk0t67uxo56bu8-6tv8m8g0rze6c0hywyt25ikrl 192.168.5.31:2377<br><br><span class="hljs-keyword">To</span> <span class="hljs-built_in">add</span> a manager <span class="hljs-keyword">to</span> this swarm, <span class="hljs-built_in">run</span> <span class="hljs-string">&#x27;docker swarm join-token manager&#x27;</span> <span class="hljs-keyword">and</span> follow the instructions.<br></code></pre></td></tr></table></figure><p>添加节点主机到Swarm集群 </p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">[root@test-<span class="hljs-number">02</span> ~]<span class="hljs-comment"># docker swarm join --token SWMTKN-1-696as9gi1evz4umswvfdaql78gfmydgo9zvhlk0t67uxo56bu8-6tv8m8g0rze6c0hywyt25ikrl 192.168.5.31:2377</span><br>This <span class="hljs-keyword">node</span> <span class="hljs-title">joined</span> a swarm as a worker.<br><br>[root@test-<span class="hljs-number">03</span> ~]<span class="hljs-comment"># docker swarm join --token SWMTKN-1-696as9gi1evz4umswvfdaql78gfmydgo9zvhlk0t67uxo56bu8-6tv8m8g0rze6c0hywyt25ikrl 192.168.5.31:2377</span><br>This <span class="hljs-keyword">node</span> <span class="hljs-title">joined</span> a swarm as a worker.<br></code></pre></td></tr></table></figure><h4 id="2-2-Swarm集群中部署服务"><a href="#2-2-Swarm集群中部署服务" class="headerlink" title="2.2 Swarm集群中部署服务"></a>2.2 Swarm集群中部署服务</h4><blockquote><p>以nginx为例</p></blockquote><p>创建网络 </p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs cmake">[root@<span class="hljs-keyword">test</span>-<span class="hljs-number">01</span> ~]<span class="hljs-comment"># docker network create -d overlay nginx_net</span><br>vjkrx34i5hqq0u7qskyz5qqbp<br>[root@<span class="hljs-keyword">test</span>-<span class="hljs-number">01</span> ~]<span class="hljs-comment"># docker network ls | grep nginx_net</span><br>vjkrx34i5hqq   nginx_net             overlay   swarm<br></code></pre></td></tr></table></figure><p>部署服务 </p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs css">// 创建一个具有一个副本（<span class="hljs-attr">--replicas</span> <span class="hljs-number">1</span> ）的nginx服务，使用镜像nginx<br><span class="hljs-selector-attr">[root@test-01 ~]</span># docker service create <span class="hljs-attr">--replicas</span> <span class="hljs-number">1</span> <span class="hljs-attr">--network</span> nginx_net <span class="hljs-attr">--name</span> my_nginx -<span class="hljs-selector-tag">p</span> <span class="hljs-number">8080</span>:<span class="hljs-number">80</span> nginx<br>tf8suw8kbusb18z32b2989ok1<br>overall progress: <span class="hljs-number">1</span> out of <span class="hljs-number">1</span> tasks <br><span class="hljs-number">1</span>/<span class="hljs-number">1</span>: running   [==================================================&gt;] <br>verify: Service converged<br></code></pre></td></tr></table></figure><p>查看服务 </p><figure class="highlight livescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs livescript">[root@test-01 ~]<span class="hljs-comment"># docker service ls</span><br>ID             NAME       MODE         REPLICAS   IMAGE          PORTS<br>tf8suw8kbusb   my_nginx   replicated   <span class="hljs-number">1</span>/<span class="hljs-number">1</span>        nginx:latest   *:<span class="hljs-number">8080</span>-&gt;<span class="hljs-number">80</span>/tcp<br></code></pre></td></tr></table></figure><p>该容器已被随机调度到test-03节点上 </p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs cmake">[root@<span class="hljs-keyword">test</span>-<span class="hljs-number">01</span> ~]<span class="hljs-comment"># docker service ps my_nginx</span><br>ID             NAME         IMAGE          NODE      DESIRED STATE   CURRENT STATE            ERROR     PORTS<br>f35206ujewx5   my_nginx.<span class="hljs-number">1</span>   nginx:latest   <span class="hljs-keyword">test</span>-<span class="hljs-number">03</span>   Running         Running <span class="hljs-number">31</span> minutes ago<br><br>[root@<span class="hljs-keyword">test</span>-<span class="hljs-number">03</span> ~]<span class="hljs-comment"># docker ps</span><br>CONTAINER ID   IMAGE          <span class="hljs-keyword">COMMAND</span>                  CREATED         STATUS         PORTS     NAMES<br><span class="hljs-number">04862</span>f50876f   nginx:latest   <span class="hljs-string">&quot;/docker-entrypoint.…&quot;</span>   <span class="hljs-number">7</span> minutes ago   Up <span class="hljs-number">7</span> minutes   <span class="hljs-number">80</span>/tcp    my_nginx.<span class="hljs-number">1</span>.f35206ujewx59x6uifn9xp0yn<br></code></pre></td></tr></table></figure><p>查看服务详细信息  </p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs ada"># -pretty 使命令输出格式化为可读的格式，不加 <span class="hljs-comment">--pretty 可以输出更详细的信息</span><br>docker service inspect <span class="hljs-comment">--pretty my_nginx</span><br></code></pre></td></tr></table></figure><p>增、减副本数 </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs sql">[root<span class="hljs-variable">@test</span><span class="hljs-number">-01</span> <span class="hljs-operator">~</span>]# docker service scale my_nginx<span class="hljs-operator">=</span><span class="hljs-number">4</span><br>my_nginx scaled <span class="hljs-keyword">to</span> <span class="hljs-number">4</span><br>overall progress: <span class="hljs-number">4</span> <span class="hljs-keyword">out</span> <span class="hljs-keyword">of</span> <span class="hljs-number">4</span> tasks <br><span class="hljs-number">1</span><span class="hljs-operator">/</span><span class="hljs-number">4</span>: <span class="hljs-keyword">running</span>   <br><span class="hljs-number">2</span><span class="hljs-operator">/</span><span class="hljs-number">4</span>: <span class="hljs-keyword">running</span>   <br><span class="hljs-number">3</span><span class="hljs-operator">/</span><span class="hljs-number">4</span>: <span class="hljs-keyword">running</span>   <br><span class="hljs-number">4</span><span class="hljs-operator">/</span><span class="hljs-number">4</span>: <span class="hljs-keyword">running</span>   <br>verify: Service converged <br>[root<span class="hljs-variable">@test</span><span class="hljs-number">-01</span> <span class="hljs-operator">~</span>]# docker service ps my_nginx<br>ID             NAME         IMAGE          NODE      DESIRED STATE   <span class="hljs-keyword">CURRENT</span> STATE               ERROR     PORTS<br>f35206ujewx5   my_nginx<span class="hljs-number">.1</span>   nginx:latest   test<span class="hljs-number">-03</span>   <span class="hljs-keyword">Running</span>         <span class="hljs-keyword">Running</span> about an <span class="hljs-keyword">hour</span> ago             <br><span class="hljs-number">0</span>m4km1rkm3da   my_nginx<span class="hljs-number">.2</span>   nginx:latest   test<span class="hljs-number">-01</span>   <span class="hljs-keyword">Running</span>         <span class="hljs-keyword">Running</span> <span class="hljs-number">29</span> seconds ago                <br>zza3kuy2ju5x   my_nginx<span class="hljs-number">.3</span>   nginx:latest   test<span class="hljs-number">-02</span>   <span class="hljs-keyword">Running</span>         <span class="hljs-keyword">Running</span> <span class="hljs-number">16</span> seconds ago                <br>kqv3hc0x2k2i   my_nginx<span class="hljs-number">.4</span>   nginx:latest   test<span class="hljs-number">-01</span>   <span class="hljs-keyword">Running</span>         <span class="hljs-keyword">Running</span> <span class="hljs-number">29</span> seconds ago<br></code></pre></td></tr></table></figure><p>或者  </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs sql">[root<span class="hljs-variable">@test</span><span class="hljs-number">-01</span> <span class="hljs-operator">~</span>]# docker service <span class="hljs-keyword">update</span> <span class="hljs-comment">--replicas 3 my_nginx</span><br>my_nginx<br>overall progress: <span class="hljs-number">3</span> <span class="hljs-keyword">out</span> <span class="hljs-keyword">of</span> <span class="hljs-number">3</span> tasks <br><span class="hljs-number">1</span><span class="hljs-operator">/</span><span class="hljs-number">3</span>: <span class="hljs-keyword">running</span>   [<span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">&gt;</span>] <br><span class="hljs-number">2</span><span class="hljs-operator">/</span><span class="hljs-number">3</span>: <span class="hljs-keyword">running</span>   [<span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">&gt;</span>] <br><span class="hljs-number">3</span><span class="hljs-operator">/</span><span class="hljs-number">3</span>: <span class="hljs-keyword">running</span>   [<span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">&gt;</span>] <br>verify: Service converged <br><br>[root<span class="hljs-variable">@test</span><span class="hljs-number">-01</span> <span class="hljs-operator">~</span>]# docker service ps my_nginx<br>ID             NAME             IMAGE          NODE      DESIRED STATE   <span class="hljs-keyword">CURRENT</span> STATE               ERROR     PORTS<br>f35206ujewx5   my_nginx<span class="hljs-number">.1</span>       nginx:latest   test<span class="hljs-number">-03</span>   <span class="hljs-keyword">Running</span>         <span class="hljs-keyword">Running</span> about an <span class="hljs-keyword">hour</span> ago             <br><span class="hljs-number">0</span>m4km1rkm3da   my_nginx<span class="hljs-number">.2</span>       nginx:latest   test<span class="hljs-number">-01</span>   <span class="hljs-keyword">Running</span>         <span class="hljs-keyword">Running</span> <span class="hljs-number">12</span> minutes ago                <br>urhb2dud5ou3   my_nginx<span class="hljs-number">.3</span>       nginx:latest   test<span class="hljs-number">-02</span>   <span class="hljs-keyword">Running</span>         <span class="hljs-keyword">Running</span> <span class="hljs-number">2</span> minutes ago <br></code></pre></td></tr></table></figure><h4 id="2-3-模拟node宕机"><a href="#2-3-模拟node宕机" class="headerlink" title="2.3 模拟node宕机"></a>2.3 模拟node宕机</h4><p>查看现在的集群状况 </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sql">[root<span class="hljs-variable">@test</span><span class="hljs-number">-01</span> <span class="hljs-operator">~</span>]# docker service ps my_nginx<br>ID             NAME         IMAGE          NODE      DESIRED STATE   <span class="hljs-keyword">CURRENT</span> STATE               ERROR     PORTS<br>f35206ujewx5   my_nginx<span class="hljs-number">.1</span>   nginx:latest   test<span class="hljs-number">-03</span>   <span class="hljs-keyword">Running</span>         <span class="hljs-keyword">Running</span> about an <span class="hljs-keyword">hour</span> ago             <br><span class="hljs-number">0</span>m4km1rkm3da   my_nginx<span class="hljs-number">.2</span>   nginx:latest   test<span class="hljs-number">-01</span>   <span class="hljs-keyword">Running</span>         <span class="hljs-keyword">Running</span> <span class="hljs-number">2</span> minutes ago                 <br>zza3kuy2ju5x   my_nginx<span class="hljs-number">.3</span>   nginx:latest   test<span class="hljs-number">-02</span>   <span class="hljs-keyword">Running</span>         <span class="hljs-keyword">Running</span> <span class="hljs-number">2</span> minutes ago                 <br>kqv3hc0x2k2i   my_nginx<span class="hljs-number">.4</span>   nginx:latest   test<span class="hljs-number">-01</span>   <span class="hljs-keyword">Running</span>         <span class="hljs-keyword">Running</span> <span class="hljs-number">2</span> minutes ago<br></code></pre></td></tr></table></figure><p>停止test-02节点的docker服务 </p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs powershell">[<span class="hljs-type">root</span>@<span class="hljs-built_in">test-02</span> ~]<span class="hljs-comment"># docker stop docker.socket</span><br>[<span class="hljs-type">root</span>@<span class="hljs-built_in">test-02</span> ~]<span class="hljs-comment"># systemctl stop docker</span><br><br>// <span class="hljs-built_in">test-02</span>的STATUS变成Down<br>[<span class="hljs-type">root</span>@<span class="hljs-built_in">test-01</span> ~]<span class="hljs-comment"># docker node ls</span><br>ID                            HOSTNAME   STATUS    AVAILABILITY   MANAGER STATUS   ENGINE VERSION<br>wn412q3wv1mw1x24livlsz3mf *   <span class="hljs-built_in">test-01</span>    Ready     Active         Leader           <span class="hljs-number">20.10</span>.<span class="hljs-number">9</span><br>i1nk1u09uv9bppt9khuf7iq1q     <span class="hljs-built_in">test-02</span>    Down      Active                          <span class="hljs-number">20.10</span>.<span class="hljs-number">10</span><br>gur3fyk224n064h50xsgj5ve3     <span class="hljs-built_in">test-03</span>    Ready     Active                          <span class="hljs-number">20.10</span>.<span class="hljs-number">12</span><br><br>// 容器被调度到其他节点上<br>[<span class="hljs-type">root</span>@<span class="hljs-built_in">test-01</span> ~]<span class="hljs-comment"># docker service ps my_nginx</span><br>ID             NAME             IMAGE          NODE      DESIRED STATE   CURRENT STATE               ERROR     PORTS<br>f35206ujewx5   my_nginx.<span class="hljs-number">1</span>       nginx:latest   <span class="hljs-built_in">test-03</span>   Running         Running about an hour ago             <br><span class="hljs-number">0</span>m4km1rkm3da   my_nginx.<span class="hljs-number">2</span>       nginx:latest   <span class="hljs-built_in">test-01</span>   Running         Running <span class="hljs-number">7</span> minutes ago                 <br><span class="hljs-number">7</span>v3sqm03eke8   my_nginx.<span class="hljs-number">3</span>       nginx:latest   <span class="hljs-built_in">test-03</span>   Running         Running <span class="hljs-number">3</span> minutes ago                 <br>zza3kuy2ju5x    \_ my_nginx.<span class="hljs-number">3</span>   nginx:latest   <span class="hljs-built_in">test-02</span>   Shutdown        Shutdown <span class="hljs-number">3</span> minutes ago                <br>kqv3hc0x2k2i   my_nginx.<span class="hljs-number">4</span>       nginx:latest   <span class="hljs-built_in">test-01</span>   Running         Running <span class="hljs-number">7</span> minutes ago<br></code></pre></td></tr></table></figure><h4 id="2-4-Swarm挂载数据卷"><a href="#2-4-Swarm挂载数据卷" class="headerlink" title="2.4 Swarm挂载数据卷"></a>2.4 Swarm挂载数据卷</h4><p>创建数据卷 </p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cmake">[root@<span class="hljs-keyword">test</span>-<span class="hljs-number">01</span> ~]<span class="hljs-comment"># docker volume create swarm_nginx</span><br>swarm_nginx<br></code></pre></td></tr></table></figure><p>创建新的服务并挂载数据卷 </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs sql">[root<span class="hljs-variable">@test</span><span class="hljs-number">-01</span> <span class="hljs-operator">~</span>]# docker service <span class="hljs-keyword">create</span> <span class="hljs-comment">--replicas 3 --mount type=volume,src=swarm_nginx,dst=/data/nginx --name test_nginx nginx</span><br>zzw77ytt9k9pbj4qaau10r1cw<br>overall progress: <span class="hljs-number">3</span> <span class="hljs-keyword">out</span> <span class="hljs-keyword">of</span> <span class="hljs-number">3</span> tasks <br><span class="hljs-number">1</span><span class="hljs-operator">/</span><span class="hljs-number">3</span>: <span class="hljs-keyword">running</span>   [<span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">&gt;</span>] <br><span class="hljs-number">2</span><span class="hljs-operator">/</span><span class="hljs-number">3</span>: <span class="hljs-keyword">running</span>   [<span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">&gt;</span>] <br><span class="hljs-number">3</span><span class="hljs-operator">/</span><span class="hljs-number">3</span>: <span class="hljs-keyword">running</span>   [<span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">&gt;</span>] <br>verify: Service converged<br></code></pre></td></tr></table></figure><p>验证挂载情况 </p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs elixir">// 查看容器<br>[root<span class="hljs-variable">@test</span><span class="hljs-number">-01</span> ~]<span class="hljs-comment"># docker service ps test_nginx</span><br><span class="hljs-title class_">ID</span>             <span class="hljs-title class_">NAME</span>           <span class="hljs-title class_">IMAGE</span>          <span class="hljs-title class_">NODE</span>      <span class="hljs-title class_">DESIRED</span> <span class="hljs-title class_">STATE</span>   <span class="hljs-title class_">CURRENT</span> <span class="hljs-title class_">STATE</span>            <span class="hljs-title class_">ERROR</span>     <span class="hljs-title class_">PORTS</span><br>esahzrfnw6yv   test_nginx.<span class="hljs-number">1</span>   <span class="hljs-symbol">nginx:</span>latest   test<span class="hljs-number">-03</span>   <span class="hljs-title class_">Running</span>         <span class="hljs-title class_">Running</span> <span class="hljs-number">54</span> seconds ago             <br>c7nu3rwt33ku   test_nginx.<span class="hljs-number">2</span>   <span class="hljs-symbol">nginx:</span>latest   test<span class="hljs-number">-02</span>   <span class="hljs-title class_">Running</span>         <span class="hljs-title class_">Running</span> <span class="hljs-number">54</span> seconds ago             <br>y1ccrqihgdm0   test_nginx.<span class="hljs-number">3</span>   <span class="hljs-symbol">nginx:</span>latest   test<span class="hljs-number">-01</span>   <span class="hljs-title class_">Running</span>         <span class="hljs-title class_">Running</span> <span class="hljs-number">54</span> seconds ago <br><br>// 查看数据卷信息<br>[root<span class="hljs-variable">@test</span><span class="hljs-number">-01</span> ~]<span class="hljs-comment"># docker volume inspect swarm_nginx</span><br>[<br>    &#123;<br>        <span class="hljs-string">&quot;CreatedAt&quot;</span>: <span class="hljs-string">&quot;2022-01-07T14:03:47+08:00&quot;</span>,<br>        <span class="hljs-string">&quot;Driver&quot;</span>: <span class="hljs-string">&quot;local&quot;</span>,<br>        <span class="hljs-string">&quot;Labels&quot;</span>: &#123;&#125;,<br>        <span class="hljs-string">&quot;Mountpoint&quot;</span>: <span class="hljs-string">&quot;/data/docker/volumes/swarm_nginx/_data&quot;</span>,<br>        <span class="hljs-string">&quot;Name&quot;</span>: <span class="hljs-string">&quot;swarm_nginx&quot;</span>,<br>        <span class="hljs-string">&quot;Options&quot;</span>: &#123;&#125;,<br>        <span class="hljs-string">&quot;Scope&quot;</span>: <span class="hljs-string">&quot;local&quot;</span><br>    &#125;<br>]<br><br>// 在数据卷中写一个文件<br>[root<span class="hljs-variable">@test</span><span class="hljs-number">-01</span> ~]<span class="hljs-comment"># cd /data/docker/volumes/swarm_nginx/_data</span><br>[root<span class="hljs-variable">@test</span><span class="hljs-number">-01</span> _data]<span class="hljs-comment"># echo hello &gt; hello.txt</span><br>[root<span class="hljs-variable">@test</span><span class="hljs-number">-01</span> _data]<span class="hljs-comment"># ls</span><br>hello.txt<br><br>// 进入容器查看<br>[root<span class="hljs-variable">@test</span><span class="hljs-number">-01</span> _data]<span class="hljs-comment"># docker exec -it test_nginx.3.y1ccrqihgdm07dvqe5swrqsqv /bin/bash</span><br>root<span class="hljs-variable">@55ec813c7a09</span><span class="hljs-symbol">:/</span><span class="hljs-comment"># cd /data/nginx</span><br>root<span class="hljs-variable">@55ec813c7a09</span><span class="hljs-symbol">:/data/nginx</span><span class="hljs-comment"># ls</span><br>hello.txt<br></code></pre></td></tr></table></figure><h4 id="2-5-节点状态转换"><a href="#2-5-节点状态转换" class="headerlink" title="2.5 节点状态转换"></a>2.5 节点状态转换</h4><p><strong>从集群删除节点</strong></p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm"><span class="hljs-comment"># worker节点直接使用此命令脱离集群，manager节点需要加-f参数</span><br><span class="hljs-comment"># 使现有manager节点脱离集群建议先把manager节点降级为worker节点</span><br>docker <span class="hljs-keyword">swarm </span>leave<br></code></pre></td></tr></table></figure><p>删除的节点的STATUS会变成Down</p><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs stata">[root@<span class="hljs-keyword">test</span>-01 ~]# docker node <span class="hljs-keyword">ls</span><br>ID                            HOSTNAME   STATUS    AVAILABILITY   MANAGER STATUS   ENGINE <span class="hljs-keyword">VERSION</span><br>lmwc1zojj4ep2sbloygxmhgge *   <span class="hljs-keyword">test</span>-01    Ready     Active         Leader           20.10.9<br>u73xz9lzi9m3ol8datpb6o34z     <span class="hljs-keyword">test</span>-02    Down      Active                          20.10.10<br>bugajj49cmb19h3omil30o8w5     <span class="hljs-keyword">test</span>-03    Ready     Active                          20.10.12<br></code></pre></td></tr></table></figure><p>要彻底从节点列表中删除此节点，使用<code>docker node rm</code>命令</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">docker <span class="hljs-keyword">node</span> <span class="hljs-title">rm</span> u73xz9lzi9m3ol8datpb6o34z<br></code></pre></td></tr></table></figure><p><strong>manager节点降级为worker节点</strong></p><p>先给予其他节点可升级为manager节点的权利，然后再将manager节点降级为worker</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs powershell">[<span class="hljs-type">root</span>@<span class="hljs-built_in">test-01</span> ~]<span class="hljs-comment"># docker node ls</span><br>ID                            HOSTNAME   STATUS    AVAILABILITY   MANAGER STATUS   ENGINE VERSION<br>wn412q3wv1mw1x24livlsz3mf *   <span class="hljs-built_in">test-01</span>    Ready     Active         Leader           <span class="hljs-number">20.10</span>.<span class="hljs-number">9</span><br>i1nk1u09uv9bppt9khuf7iq1q     <span class="hljs-built_in">test-02</span>    Ready     Active                          <span class="hljs-number">20.10</span>.<span class="hljs-number">10</span><br>gur3fyk224n064h50xsgj5ve3     <span class="hljs-built_in">test-03</span>    Ready     Active                          <span class="hljs-number">20.10</span>.<span class="hljs-number">12</span><br><br>// 给予<span class="hljs-built_in">test-02</span>节点可升级为manager节点的权利<br>[<span class="hljs-type">root</span>@<span class="hljs-built_in">test-01</span> ~]<span class="hljs-comment"># docker node promote i1nk1u09uv9bppt9khuf7iq1q</span><br>Node i1nk1u09uv9bppt9khuf7iq1q promoted to a manager <span class="hljs-keyword">in</span> the swarm.<br><br>// <span class="hljs-built_in">test-02</span>节点现在是Reachable状态<br>[<span class="hljs-type">root</span>@<span class="hljs-built_in">test-01</span> ~]<span class="hljs-comment"># docker node ls</span><br>ID                            HOSTNAME   STATUS    AVAILABILITY   MANAGER STATUS   ENGINE VERSION<br>wn412q3wv1mw1x24livlsz3mf *   <span class="hljs-built_in">test-01</span>    Ready     Active         Leader           <span class="hljs-number">20.10</span>.<span class="hljs-number">9</span><br>i1nk1u09uv9bppt9khuf7iq1q     <span class="hljs-built_in">test-02</span>    Ready     Active         Reachable        <span class="hljs-number">20.10</span>.<span class="hljs-number">10</span><br>gur3fyk224n064h50xsgj5ve3     <span class="hljs-built_in">test-03</span>    Ready     Active                          <span class="hljs-number">20.10</span>.<span class="hljs-number">12</span><br><br>// 把现有manager节点降级<br>[<span class="hljs-type">root</span>@<span class="hljs-built_in">test-01</span> ~]<span class="hljs-comment"># docker node demote wn412q3wv1mw1x24livlsz3mf</span><br>Manager wn412q3wv1mw1x24livlsz3mf demoted <span class="hljs-keyword">in</span> the swarm.<br></code></pre></td></tr></table></figure><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs stata"><span class="hljs-comment">// 现在test-02节点成为manager节点</span><br>[root@<span class="hljs-keyword">test</span>-02 ~]# docker node <span class="hljs-keyword">ls</span><br>ID                            HOSTNAME   STATUS    AVAILABILITY   MANAGER STATUS   ENGINE <span class="hljs-keyword">VERSION</span><br>wn412q3wv1mw1x24livlsz3mf     <span class="hljs-keyword">test</span>-01    Ready     Active                          20.10.9<br>i1nk1u09uv9bppt9khuf7iq1q *   <span class="hljs-keyword">test</span>-02    Ready     Active         Leader           20.10.10<br>gur3fyk224n064h50xsgj5ve3     <span class="hljs-keyword">test</span>-03    Ready     Active         Reachable        20.10.12<br></code></pre></td></tr></table></figure><p><strong>更改节点的availablity状态</strong></p><p>swarm集群中node的availability状态可以为 active或者drain，其中：<br>active状态下，node可以接受来自manager节点的任务分派；<br>drain状态下，node节点会结束task，且不再接受来自manager节点的任务分派（也就是下线节点）</p><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs perl">[root<span class="hljs-variable">@test</span>-<span class="hljs-number">01</span> ~]<span class="hljs-comment"># docker node ls</span><br>ID                            HOSTNAME   STATUS    AVAILABILITY   MANAGER STATUS   ENGINE VERSION<br>wn412q3wv1mw1x24livlsz3mf *   test-<span class="hljs-number">01</span>    Ready     Active         Leader           <span class="hljs-number">20.10</span>.<span class="hljs-number">9</span><br>i1nk1u09uv9bppt9khuf7iq1q     test-<span class="hljs-number">02</span>    Ready     Active                          <span class="hljs-number">20.10</span><span class="hljs-number">.10</span><br>gur3fyk224n064h50xsgj5ve3     test-<span class="hljs-number">03</span>    Ready     Active                          <span class="hljs-number">20.10</span><span class="hljs-number">.12</span><br><br>// 更改test-<span class="hljs-number">02</span>节点的availability状态<br>[root<span class="hljs-variable">@test</span>-<span class="hljs-number">01</span> ~]<span class="hljs-comment"># docker node update --availability drain i1nk1u09uv9bppt9khuf7iq1q</span><br>i1nk1u09uv9bppt9khuf7iq1<span class="hljs-string">q</span><br><span class="hljs-string"></span><br><span class="hljs-string">[root<span class="hljs-variable">@test</span>-01 ~]</span><span class="hljs-comment"># docker node ls</span><br>ID                            HOSTNAME   STATUS    AVAILABILITY   MANAGER STATUS   ENGINE VERSION<br>wn412q3wv1mw1x24livlsz3mf *   test-<span class="hljs-number">01</span>    Ready     Active         Leader           <span class="hljs-number">20.10</span>.<span class="hljs-number">9</span><br>i1nk1u09uv9bppt9khuf7iq1q     test-<span class="hljs-number">02</span>    Ready     Drain                           <span class="hljs-number">20.10</span><span class="hljs-number">.10</span><br>gur3fyk224n064h50xsgj5ve3     test-<span class="hljs-number">03</span>    Ready     Active                          <span class="hljs-number">20.10</span><span class="hljs-number">.12</span><br><br>// 恢复test-<span class="hljs-number">02</span>节点的availability状态<br>[root<span class="hljs-variable">@test</span>-<span class="hljs-number">01</span> ~]<span class="hljs-comment"># docker node update --availability active i1nk1u09uv9bppt9khuf7iq1q</span><br>i1nk1u09uv9bppt9khuf7iq1<span class="hljs-string">q</span><br><span class="hljs-string"></span><br><span class="hljs-string">[root<span class="hljs-variable">@test</span>-01 ~]</span><span class="hljs-comment"># docker node ls</span><br>ID                            HOSTNAME   STATUS    AVAILABILITY   MANAGER STATUS   ENGINE VERSION<br>wn412q3wv1mw1x24livlsz3mf *   test-<span class="hljs-number">01</span>    Ready     Active         Leader           <span class="hljs-number">20.10</span>.<span class="hljs-number">9</span><br>i1nk1u09uv9bppt9khuf7iq1q     test-<span class="hljs-number">02</span>    Ready     Active                          <span class="hljs-number">20.10</span><span class="hljs-number">.10</span><br>gur3fyk224n064h50xsgj5ve3     test-<span class="hljs-number">03</span>    Ready     Active                          <span class="hljs-number">20.10</span><span class="hljs-number">.12</span><br></code></pre></td></tr></table></figure><h4 id="2-6-Swarm容器网络"><a href="#2-6-Swarm容器网络" class="headerlink" title="2.6 Swarm容器网络"></a>2.6 Swarm容器网络</h4><p>创建overlay网络 </p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs css">// <span class="hljs-attr">--opt</span> encrypted <br>// <span class="hljs-attr">--subnet</span> 指定<span class="hljs-attribute">overlay</span>网络使用的子网网段<br><span class="hljs-selector-attr">[root@test-01 ~]</span># docker network create <span class="hljs-attr">--driver</span> <span class="hljs-attribute">overlay</span> <span class="hljs-attr">--opt</span> encrypted <span class="hljs-attr">--subnet</span> <span class="hljs-number">10.10</span>.<span class="hljs-number">19.0</span>/<span class="hljs-number">24</span> ngx_net<br></code></pre></td></tr></table></figure><p>查看</p><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs autoit">[root<span class="hljs-symbol">@test</span><span class="hljs-number">-01</span> ~]<span class="hljs-meta"># docker network ls | grep ngx_net</span><br>vl5h7bm097h2   ngx_net               overlay   swarm<br></code></pre></td></tr></table></figure><p>将服务连接到overlay网络 </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs sql">[root<span class="hljs-variable">@test</span><span class="hljs-number">-01</span> <span class="hljs-operator">~</span>]# docker service <span class="hljs-keyword">create</span> <span class="hljs-comment">--replicas 5 --network ngx_net --name my-test -p 80:80 nginx</span><br><span class="hljs-number">7</span>z8iyhvciaz4romtz0yylgc6f<br>overall progress: <span class="hljs-number">5</span> <span class="hljs-keyword">out</span> <span class="hljs-keyword">of</span> <span class="hljs-number">5</span> tasks <br><span class="hljs-number">1</span><span class="hljs-operator">/</span><span class="hljs-number">5</span>: <span class="hljs-keyword">running</span>   [<span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">&gt;</span>] <br><span class="hljs-number">2</span><span class="hljs-operator">/</span><span class="hljs-number">5</span>: <span class="hljs-keyword">running</span>   [<span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">&gt;</span>] <br><span class="hljs-number">3</span><span class="hljs-operator">/</span><span class="hljs-number">5</span>: <span class="hljs-keyword">running</span>   [<span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">&gt;</span>] <br><span class="hljs-number">4</span><span class="hljs-operator">/</span><span class="hljs-number">5</span>: <span class="hljs-keyword">running</span>   [<span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">&gt;</span>] <br><span class="hljs-number">5</span><span class="hljs-operator">/</span><span class="hljs-number">5</span>: <span class="hljs-keyword">running</span>   [<span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">&gt;</span>] <br>verify: Service converged<br></code></pre></td></tr></table></figure><p>验证<br>my-test服务启动了5个容器 </p><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs perl">[root<span class="hljs-variable">@test</span>-<span class="hljs-number">01</span> ~]<span class="hljs-comment"># docker service ls</span><br>ID             NAME      MODE         REPLICAS   IMAGE          PORTS<br>7z8iyhvciaz4   <span class="hljs-keyword">my</span>-test   replicated   <span class="hljs-number">5</span>/<span class="hljs-number">5</span>        nginx:latest   *:<span class="hljs-number">80</span>-&gt;<span class="hljs-number">80</span>/tcp<br>[root<span class="hljs-variable">@test</span>-<span class="hljs-number">01</span> ~]<span class="hljs-comment"># docker service ps my-test</span><br>ID             NAME        IMAGE          NODE      DESIRED STATE   CURRENT STATE           ERROR     PORTS<br>yeyjimhj7j0p   <span class="hljs-keyword">my</span>-test.<span class="hljs-number">1</span>   nginx:latest   test-<span class="hljs-number">01</span>   Running         Running <span class="hljs-number">2</span> minutes ago             <br>fwh5uek5apkm   <span class="hljs-keyword">my</span>-test.<span class="hljs-number">2</span>   nginx:latest   test-<span class="hljs-number">02</span>   Running         Running <span class="hljs-number">2</span> minutes ago             <br>osqisjaujky1   <span class="hljs-keyword">my</span>-test.<span class="hljs-number">3</span>   nginx:latest   test-<span class="hljs-number">03</span>   Running         Running <span class="hljs-number">2</span> minutes ago             <br>gqh1x0xkrlma   <span class="hljs-keyword">my</span>-test.<span class="hljs-number">4</span>   nginx:latest   test-<span class="hljs-number">02</span>   Running         Running <span class="hljs-number">2</span> minutes ago             <br>nj5e966djdz4   <span class="hljs-keyword">my</span>-test.<span class="hljs-number">5</span>   nginx:latest   test-<span class="hljs-number">03</span>   Running         Running <span class="hljs-number">2</span> minutes ago<br></code></pre></td></tr></table></figure><p>在所有节点上执行<code>docker network inspect ngx_net</code>，查看Container项的信息  </p><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><code class="hljs jboss-cli">[root@test-01 ~]<span class="hljs-comment"># docker network inspect ngx_net</span><br><span class="hljs-string">...</span><br><span class="hljs-string">&quot;Containers&quot;</span>: &#123;<br><span class="hljs-string">&quot;051df0700a93a75c76e30cdf18f0817df6c9b61a9e6997c7860b8274dcb70791&quot;</span>: &#123;<br><span class="hljs-string">&quot;Name&quot;</span>: <span class="hljs-string">&quot;my-test.1.yeyjimhj7j0p2rnhvaoao8w5u&quot;</span>,<br><span class="hljs-string">&quot;EndpointID&quot;</span>: <span class="hljs-string">&quot;945cff4492581f5d34b5742396330df235650ee7292f6071bbdb69ada8d80556&quot;</span>,<br><span class="hljs-string">&quot;MacAddress&quot;</span>: <span class="hljs-string">&quot;02:42:0a:0a:13:07&quot;</span>,<br><span class="hljs-string">&quot;IPv4Address&quot;</span>: <span class="hljs-string">&quot;10.10.19.7/24&quot;</span>,<br><span class="hljs-string">&quot;IPv6Address&quot;</span>: <span class="hljs-string">&quot;&quot;</span><br>&#125;,<br><span class="hljs-string">&quot;lb-ngx_net&quot;</span>: &#123;<br><span class="hljs-string">&quot;Name&quot;</span>: <span class="hljs-string">&quot;ngx_net-endpoint&quot;</span>,<br><span class="hljs-string">&quot;EndpointID&quot;</span>: <span class="hljs-string">&quot;4cd9cce182b79cefec7dbc39be3eecfdb583439b308a3bd50ff2930f8dc44654&quot;</span>,<br><span class="hljs-string">&quot;MacAddress&quot;</span>: <span class="hljs-string">&quot;02:42:0a:0a:13:0a&quot;</span>,<br><span class="hljs-string">&quot;IPv4Address&quot;</span>: <span class="hljs-string">&quot;10.10.19.10/24&quot;</span>,<br><span class="hljs-string">&quot;IPv6Address&quot;</span>: <span class="hljs-string">&quot;&quot;</span><br>&#125;<br>&#125;,<br><span class="hljs-string">...</span><br><br><br>[root@test-02 ~]<span class="hljs-comment"># docker network inspect ngx_net</span><br><span class="hljs-string">...</span><br><span class="hljs-string">&quot;Containers&quot;</span>: &#123;<br><span class="hljs-string">&quot;accf9fb67565407cd2f8c0e1406c50cdaf187ff69f7f8e80f82cd737a5f17333&quot;</span>: &#123;<br><span class="hljs-string">&quot;Name&quot;</span>: <span class="hljs-string">&quot;my-test.2.fwh5uek5apkmlvazzfpuv8bpc&quot;</span>,<br><span class="hljs-string">&quot;EndpointID&quot;</span>: <span class="hljs-string">&quot;be059871334e8e8a8ff14042df06d57048ef58b725b4948d4ce1708e0751af54&quot;</span>,<br><span class="hljs-string">&quot;MacAddress&quot;</span>: <span class="hljs-string">&quot;02:42:0a:0a:13:03&quot;</span>,<br><span class="hljs-string">&quot;IPv4Address&quot;</span>: <span class="hljs-string">&quot;10.10.19.3/24&quot;</span>,<br><span class="hljs-string">&quot;IPv6Address&quot;</span>: <span class="hljs-string">&quot;&quot;</span><br>&#125;,<br><span class="hljs-string">&quot;b9be5cfd4d7b4bead0389b6965b03786a03f97f93bc177ee46ea14bf7e967f2e&quot;</span>: &#123;<br><span class="hljs-string">&quot;Name&quot;</span>: <span class="hljs-string">&quot;my-test.4.gqh1x0xkrlmajois32eg27v6m&quot;</span>,<br><span class="hljs-string">&quot;EndpointID&quot;</span>: <span class="hljs-string">&quot;8c6379dd8ebe4e1719596bd9b4eaf7dc6ac7c70d843572eaf65ff0c6c6e9e2f7&quot;</span>,<br><span class="hljs-string">&quot;MacAddress&quot;</span>: <span class="hljs-string">&quot;02:42:0a:0a:13:05&quot;</span>,<br><span class="hljs-string">&quot;IPv4Address&quot;</span>: <span class="hljs-string">&quot;10.10.19.5/24&quot;</span>,<br><span class="hljs-string">&quot;IPv6Address&quot;</span>: <span class="hljs-string">&quot;&quot;</span><br>&#125;,<br><span class="hljs-string">&quot;lb-ngx_net&quot;</span>: &#123;<br><span class="hljs-string">&quot;Name&quot;</span>: <span class="hljs-string">&quot;ngx_net-endpoint&quot;</span>,<br><span class="hljs-string">&quot;EndpointID&quot;</span>: <span class="hljs-string">&quot;fe004af5e38c70d5d6048e3fee370be127ceaecb0549270895d7fa49c5e171f2&quot;</span>,<br><span class="hljs-string">&quot;MacAddress&quot;</span>: <span class="hljs-string">&quot;02:42:0a:0a:13:08&quot;</span>,<br><span class="hljs-string">&quot;IPv4Address&quot;</span>: <span class="hljs-string">&quot;10.10.19.8/24&quot;</span>,<br><span class="hljs-string">&quot;IPv6Address&quot;</span>: <span class="hljs-string">&quot;&quot;</span><br>&#125;<br>&#125;,<br><span class="hljs-string">...</span><br><br>[root@test-03 ~]<span class="hljs-comment"># docker network inspect ngx_net</span><br><span class="hljs-string">...</span><br><span class="hljs-string">&quot;Containers&quot;</span>: &#123;<br><span class="hljs-string">&quot;9d898a981224677a010e94c1d6d507ce73dbbc1f2bcea1a367f8519b05f1ee73&quot;</span>: &#123;<br><span class="hljs-string">&quot;Name&quot;</span>: <span class="hljs-string">&quot;my-test.3.osqisjaujky1sevyiy5q4wrs9&quot;</span>,<br><span class="hljs-string">&quot;EndpointID&quot;</span>: <span class="hljs-string">&quot;520c96b3d9d2e651d1b6155a6ef1005e904430a9e9ef31dfb116d40506d4b0b0&quot;</span>,<br><span class="hljs-string">&quot;MacAddress&quot;</span>: <span class="hljs-string">&quot;02:42:0a:0a:13:04&quot;</span>,<br><span class="hljs-string">&quot;IPv4Address&quot;</span>: <span class="hljs-string">&quot;10.10.19.4/24&quot;</span>,<br><span class="hljs-string">&quot;IPv6Address&quot;</span>: <span class="hljs-string">&quot;&quot;</span><br>&#125;,<br><span class="hljs-string">&quot;cc10e89a798be50d960e2b325a8555b02626893eb90e2cd932fdf39090ed0cf5&quot;</span>: &#123;<br><span class="hljs-string">&quot;Name&quot;</span>: <span class="hljs-string">&quot;my-test.5.nj5e966djdz4j7hf01pn9kyvc&quot;</span>,<br><span class="hljs-string">&quot;EndpointID&quot;</span>: <span class="hljs-string">&quot;4c0e9c3b4d20fee6a0a633372c3db6a1e273bf6bf05bc824af5a75840198c605&quot;</span>,<br><span class="hljs-string">&quot;MacAddress&quot;</span>: <span class="hljs-string">&quot;02:42:0a:0a:13:06&quot;</span>,<br><span class="hljs-string">&quot;IPv4Address&quot;</span>: <span class="hljs-string">&quot;10.10.19.6/24&quot;</span>,<br><span class="hljs-string">&quot;IPv6Address&quot;</span>: <span class="hljs-string">&quot;&quot;</span><br>&#125;,<br><span class="hljs-string">&quot;lb-ngx_net&quot;</span>: &#123;<br><span class="hljs-string">&quot;Name&quot;</span>: <span class="hljs-string">&quot;ngx_net-endpoint&quot;</span>,<br><span class="hljs-string">&quot;EndpointID&quot;</span>: <span class="hljs-string">&quot;67769a3b5bdc5dbfdfcdb7c00606a82398ba6b8f894dd32354ab3d20c31be3ad&quot;</span>,<br><span class="hljs-string">&quot;MacAddress&quot;</span>: <span class="hljs-string">&quot;02:42:0a:0a:13:09&quot;</span>,<br><span class="hljs-string">&quot;IPv4Address&quot;</span>: <span class="hljs-string">&quot;10.10.19.9/24&quot;</span>,<br><span class="hljs-string">&quot;IPv6Address&quot;</span>: <span class="hljs-string">&quot;&quot;</span><br>&#125;<br>&#125;,<br><span class="hljs-string">...</span><br></code></pre></td></tr></table></figure><p>获取服务的虚拟ip地址</p><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs stata">[root@<span class="hljs-keyword">test</span>-01 ~]# docker service <span class="hljs-keyword">inspect</span> --<span class="hljs-keyword">format</span>=&#x27;&#123;&#123;json .Endpoint.VirtualIPs&#125;&#125;&#x27; my-<span class="hljs-keyword">test</span><br>[&#123;<span class="hljs-string">&quot;NetworkID&quot;</span>:<span class="hljs-string">&quot;p0m0a6xy1yvqchztomcmlpehf&quot;</span>,<span class="hljs-string">&quot;Addr&quot;</span>:<span class="hljs-string">&quot;10.0.0.5/24&quot;</span>&#125;,&#123;<span class="hljs-string">&quot;NetworkID&quot;</span>:<span class="hljs-string">&quot;vl5h7bm097h2pralfe7xp7ehq&quot;</span>,<span class="hljs-string">&quot;Addr&quot;</span>:<span class="hljs-string">&quot;10.10.19.2/24&quot;</span>&#125;]<br></code></pre></td></tr></table></figure><p>可知10.10.19.2是这个swarm集群的内部vip </p><ul><li>加入ngx_net网络的容器彼此之间可以通过IP地址通信，也可以通过名称通信。 </li><li>docker默认创建一个名为ingress的overlay网络，Swarm 管理节点会利用 ingress 负载均衡以将服务公布至集群之外 </li><li>默认情况下，当创建了一个服务并连接到某个网络后，swarm会为该服务分配一个VIP。此VIP根据服务名映射到DNS。在网络上的容器共享该服务的DNS映射，<br>  所以网络上的任意容器可以通过服务名访问服务。<br>  在同一overlay网络中，不用通过端口映射来使某个服务可以被其它服务访问。Swarm内部的负载均衡器自动将请求发送到服务的VIP上，然后分发到所有的<br>  active的task上。 </li><li>Swarm的负载均衡器自动将HTTP请求路由到VIP上，然后到一个active的task容器上。它根据round-robin选择算法将后续的请求分发到另一个active的task上。</li></ul><h2 id="扩展"><a href="#扩展" class="headerlink" title="扩展"></a>扩展</h2><h3 id="1-Docker故障处理"><a href="#1-Docker故障处理" class="headerlink" title="1. Docker故障处理"></a>1. Docker故障处理</h3><h4 id="1-1-无法停止Docker服务"><a href="#1-1-无法停止Docker服务" class="headerlink" title="1.1 无法停止Docker服务"></a>1.1 无法停止Docker服务</h4><p>使用<code>systemctl stop docker.service</code>命令停止docker服务，但是显示:</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs applescript">Warning: Stopping docker.service, <span class="hljs-keyword">but</span> <span class="hljs-keyword">it</span> can still be activated <span class="hljs-keyword">by</span>:<br>  docker.socket<br></code></pre></td></tr></table></figure><p>docker进程并未被停止。</p><p>需要先停止<code>docker.socket</code></p><p>执行如下命令，停止docker服务</p><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs livecodeserver">systemctl <span class="hljs-built_in">stop</span> docker.<span class="hljs-built_in">socket</span><br><br>systemctl <span class="hljs-built_in">stop</span> docker.service<br></code></pre></td></tr></table></figure><h4 id="1-2-连接网卡设备失败"><a href="#1-2-连接网卡设备失败" class="headerlink" title="1.2 连接网卡设备失败"></a>1.2 连接网卡设备失败</h4><figure class="highlight subunit"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs subunit"><span class="hljs-keyword">Error: </span>Connection activation failed: No suitable device found for this connection<br></code></pre></td></tr></table></figure><p>解决方式：重启网卡</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">systemctl restart network</span><br></code></pre></td></tr></table></figure><h4 id="1-3-bridge-nf-call-iptables-is-disabled"><a href="#1-3-bridge-nf-call-iptables-is-disabled" class="headerlink" title="1.3 bridge-nf-call-iptables is disabled"></a>1.3 bridge-nf-call-iptables is disabled</h4><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs asciidoc"><span class="hljs-symbol">WARNING: </span>bridge-nf-call-iptables is disabled<br>WARNGIN: bridge-nf-call-ip6tables is disabled<br></code></pre></td></tr></table></figure><p>解决方法：</p><p>在<code>/etc/sysctl.conf</code>文件中添加两行配置</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cat</span> &gt;&gt; /etc/sysct.conf &lt;&lt; <span class="hljs-string">EOF</span><br><span class="hljs-string">net.bridge.bridge-nf-call-iptables = 1</span><br><span class="hljs-string">net.bridge.bridge-nf-call-ip6tables = 1</span><br><span class="hljs-string">EOF</span><br><br>sysctl -p<br></code></pre></td></tr></table></figure><h4 id="1-4-Docker映射端口时仅有IPv6无法到IPv4"><a href="#1-4-Docker映射端口时仅有IPv6无法到IPv4" class="headerlink" title="1.4 Docker映射端口时仅有IPv6无法到IPv4"></a>1.4 Docker映射端口时仅有IPv6无法到IPv4</h4><p>启动docker某服务，只显示ipv6的端口信息，ipv4无端口信息，导致外部无法通过ipv4访问服务，报Connection resused错误</p><p>解决方法：在服务器上禁用ipv6</p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs makefile"><span class="hljs-comment"># 在GRUB_CMDLINE_LINUX项中添加ipv6.disable=1</span><br><br>GRUB_CMDLINE_LINUX=<span class="hljs-string">&quot;crashkernel=auto ...&quot;</span><br>  ↓<br>GRUB_CMDLINE_LINUX=<span class="hljs-string">&quot; ipv6.disable=1 crashkernel=auto ...&quot;</span><br></code></pre></td></tr></table></figure><h4 id="1-5-空间不足问题"><a href="#1-5-空间不足问题" class="headerlink" title="1.5 空间不足问题"></a>1.5 空间不足问题</h4><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">dpkg: error processing archive /var/<span class="hljs-keyword">cache</span>/apt/archives/libc6-dev-i386_2<span class="hljs-number">.23</span><span class="hljs-number">-0</span>ubuntu10_amd64.deb (<span class="hljs-comment">--unpack):</span><br> cannot <span class="hljs-keyword">copy</span> extracted data <span class="hljs-keyword">for</span> <span class="hljs-string">&#x27;./usr/lib32/libresolv.a&#x27;</span> <span class="hljs-keyword">to</span> <span class="hljs-string">&#x27;/usr/lib32/libresolv.a.dpkg-new&#x27;</span>: failed <span class="hljs-keyword">to</span> <span class="hljs-keyword">write</span> (<span class="hljs-keyword">No</span> space left <span class="hljs-keyword">on</span> device)<br></code></pre></td></tr></table></figure><p>解决方法：修改 &#x2F;lib&#x2F;systemd&#x2F;system&#x2F;docker.service</p><p>直接在ExecStart的启动命令中添加 <code>-g /xxx</code> 修改 <code>Docker Root Dir</code>。</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">ExecStart=<span class="hljs-regexp">/usr/</span>bin<span class="hljs-regexp">/dockerd -g /</span>data<span class="hljs-regexp">/docker/</span> -H fd:<span class="hljs-regexp">//</span><br></code></pre></td></tr></table></figure><p><em>记得将原路径的文件(使用root)拷贝到新的目录。这样docker才能找到原先的镜像和容器以及相关缓存(Layer)等。</em></p><p>然后重启</p><h3 id="2-Docker镜像加速配置"><a href="#2-Docker镜像加速配置" class="headerlink" title="2. Docker镜像加速配置"></a>2. Docker镜像加速配置</h3><p>加速地址：</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs vim">科大镜像：https://docker.mirrors.ustc.edu.<span class="hljs-keyword">cn</span>/<br>网易：https://hub-mirror.<span class="hljs-keyword">c</span>.<span class="hljs-number">163</span>.<span class="hljs-keyword">com</span>/<br>阿里云：https://<span class="hljs-keyword">cr</span>.console.aliyun.<span class="hljs-keyword">com</span>/<br>七牛云加速器：https://<span class="hljs-keyword">reg</span>-mirror.qiniu.<span class="hljs-keyword">com</span><br>腾讯云：https://mirrors.css.tencentyun.<span class="hljs-keyword">com</span><br></code></pre></td></tr></table></figure><p>生成配置文件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ <span class="hljs-built_in">cat</span> /etc/docker/daemon.json<br>&#123;<br>    <span class="hljs-string">&quot;registry-mirrors&quot;</span>: [<br>        <span class="hljs-string">&quot;https://fv50tv30.mirror.aliyuncs.com&quot;</span>, <span class="hljs-string">&quot;https://reg-mirror.qiniu.com&quot;</span><br>    ],<br>    <span class="hljs-string">&quot;dns&quot;</span>: [<br>        <span class="hljs-string">&quot;114.114.114.114&quot;</span>,<br>        <span class="hljs-string">&quot;8.8.8.8&quot;</span><br>    ]<br>&#125;<br></code></pre></td></tr></table></figure><p>重启docker服务</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">systemctl restart docker</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>学习笔记</category>
      
      <category>Docker</category>
      
    </categories>
    
    
    <tags>
      
      <tag>学习笔记</tag>
      
      <tag>Docker</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
